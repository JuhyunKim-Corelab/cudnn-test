; ModuleID = 'convOpti.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".section .nv_fatbin, \22a\22"
module asm ".align 8"
module asm "fatbinData:"
module asm ".quad 0x00100001ba55ed50,0x0000000000001908,0x0000005001010002,0x00000000000010f8"
module asm ".quad 0x0000000000000000,0x0000001400010007,0x0000000b00000040,0x0000000000000015"
module asm ".quad 0x0000000000000000,0x0000000000000000,0x6974704f766e6f63,0x000000000075632e"
module asm ".quad 0x33010102464c457f,0x0000000000000007,0x0000004100be0002,0x0000000000000000"
module asm ".quad 0x000000000000104c,0x0000000000000e0c,0x0038004000140514,0x0001000900400003"
module asm ".quad 0x7472747368732e00,0x747274732e006261,0x746d79732e006261,0x747865742e006261"
module asm ".quad 0x74706f34315a5f2e,0x6c6946766e6f4369,0x4531694c49726574,0x535f305366507645"
module asm ".quad 0x6969696969695f30,0x6266666969696969,0x666e692e766e2e00,0x706f34315a5f2e6f"
module asm ".quad 0x6946766e6f436974,0x31694c497265746c,0x5f30536650764545,0x69696969695f3053"
module asm ".quad 0x6666696969696969,0x68732e766e2e0062,0x315a5f2e64657261,0x6e6f436974706f34"
module asm ".quad 0x497265746c694676,0x665076454531694c,0x69695f30535f3053,0x6969696969696969"
module asm ".quad 0x766e2e0062666669,0x6e2e006f666e692e,0x6174736e6f632e76,0x34315a5f2e30746e"
module asm ".quad 0x766e6f436974706f,0x4c497265746c6946,0x5366507645453169,0x6969695f30535f30"
module asm ".quad 0x6969696969696969,0x68732e0000626666,0x2e00626174727473,0x2e00626174727473"
module asm ".quad 0x5f006261746d7973,0x436974706f34315a,0x65746c6946766e6f,0x76454531694c4972"
module asm ".quad 0x5f30535f30536650,0x6969696969696969,0x2e00626666696969,0x315a5f2e74786574"
module asm ".quad 0x6e6f436974706f34,0x497265746c694676,0x665076454531694c,0x69695f30535f3053"
module asm ".quad 0x6969696969696969,0x766e2e0062666669,0x5a5f2e6f666e692e,0x6f436974706f3431"
module asm ".quad 0x7265746c6946766e,0x5076454531694c49,0x695f30535f305366,0x6969696969696969"
module asm ".quad 0x6e2e006266666969,0x6465726168732e76,0x74706f34315a5f2e,0x6c6946766e6f4369"
module asm ".quad 0x4531694c49726574,0x535f305366507645,0x6969696969695f30,0x6266666969696969"
module asm ".quad 0x666e692e766e2e00,0x315a5f5f5f24006f,0x6e6f436974706f34,0x497265746c694676"
module asm ".quad 0x665076454531694c,0x69695f30535f3053,0x6969696969696969,0x635f5f2462666669"
module asm ".quad 0x61636f6c5f616475,0x35335f7261765f6c,0x6e5f35335f333937,0x74736e6f635f6e6f"
module asm ".quad 0x38335f5f5768735f,0x6e6f632e766e2e00,0x5f2e30746e617473,0x436974706f34315a"
module asm ".quad 0x65746c6946766e6f,0x76454531694c4972,0x5f30535f30536650,0x6969696969696969"
module asm ".quad 0x5f00626666696969,0x0000006d61726170,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x0000000000000000,0x000700030000004b,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x00080003000000ba,0x0000000000000000,0x0000000000000000,0x000600030000015d"
module asm ".quad 0x0000000000000000,0x0000000000000000,0x000710120000001b,0x0000000000000000"
module asm ".quad 0x00000000000008e8,0x0000000300080a04,0x004d1903004d0020,0x00000000000c1704"
module asm ".quad 0x0005f000004c0010,0x00000000000c1704,0x0011f0000048000f,0x00000000000c1704"
module asm ".quad 0x0011f0000044000e,0x00000000000c1704,0x0011f0000040000d,0x00000000000c1704"
module asm ".quad 0x0011f000003c000c,0x00000000000c1704,0x0011f0000038000b,0x00000000000c1704"
module asm ".quad 0x0011f0000034000a,0x00000000000c1704,0x0011f00000300009,0x00000000000c1704"
module asm ".quad 0x0011f000002c0008,0x00000000000c1704,0x0011f00000280007,0x00000000000c1704"
module asm ".quad 0x0011f00000240006,0x00000000000c1704,0x0011f00000200005,0x00000000000c1704"
module asm ".quad 0x0011f000001c0004,0x00000000000c1704,0x0011f00000180003,0x00000000000c1704"
module asm ".quad 0x0021f00000100002,0x00000000000c1704,0x0021f00000080001,0x00000000000c1704"
module asm ".quad 0x0021f00000000000,0x0000002400041e04,0x0000000400082304,0x0008120400000000"
module asm ".quad 0x0000000000000004,0x0000000400081104,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x00005de400000000,0x10001de428004404,0x2000dde428004001,0xfc011de228004001"
module asm ".quad 0x0002dca31bffffff,0x20329ca350004001,0x2d209ec450004001,0x80a15ca31c000000"
module asm ".quad 0x09201c0420084001,0x10001c0018040000,0xf8001c02c8000000,0x01201c04083fffff"
module asm ".quad 0x0020dc0314860000,0x0d211f8450000000,0x1520dec41c000000,0x10001c431c000000"
module asm ".quad 0x2c511c8320000000,0x0c001c4368000000,0xfc43dc2350000000,0x0020de031b0e0000"
module asm ".quad 0x0c21dc0320060000,0x0830c103198e0000,0x0400000348000000,0x0831dc034800c000"
module asm ".quad 0x2ff09dc31b0e0000,0x0400000368000000,0x012027844800c000,0x00201c231c000000"
module asm ".quad 0x04011c0331160000,0x0441dc234800c000,0xa00001e7188ec000,0x84001c0440000002"
module asm ".quad 0x94009c042c000000,0x80a15ca32c000000,0x20031de450004001,0xf0009ca328004000"
module asm ".quad 0xfc00dde420044000,0xfccfdc0328000000,0x081fdc03207e0000,0x00001de4200a0000"
module asm ".quad 0x1403dc0340000000,0x0430dc031b0e0000,0x1001a5e24800c000,0x1031dc2318000000"
module asm ".quad 0x0801e603188e0000,0xa02224036000c000,0x20001c03200d8000,0xb022644348004000"
module asm ".quad 0xf0c09ca3208c8000,0x0081a48520044000,0x0071a48584000000,0x800001e7c9000000"
module asm ".quad 0x040fdc034003fffe,0xffffdc0420040000,0x2d211ec450ee0000,0x84009c041c000000"
module asm ".quad 0x2ff19dc32c000000,0x11201c0468000000,0x10001c0018040000,0xf8001c02c8000000"
module asm ".quad 0x0120dc04083fffff,0x94001c0414860000,0x0c415c032c000000,0x20031ca350000000"
module asm ".quad 0x15209f8420044000,0x31201ec41c000000,0x20015de41c000000,0x08309c4328004001"
module asm ".quad 0xfcc3dc2320060000,0x00209c431b0e0000,0x0840de0350000000,0x08509c4320000000"
module asm ".quad 0xfc001de4200ac000,0x0c41dc0328000000,0x04209c23198e0000,0x1030c1035800c000"
module asm ".quad 0x0c41dc0348000000,0x1030c103198e0000,0x0451dc2348000000,0x0d20e7841a0ec000"
module asm ".quad 0x0c60dc231c000000,0x800001e731160000,0xfc011de440000000,0xfc015de428000000"
module asm ".quad 0xfc019de428000000,0x20001de728000000,0xfc011de440000009,0xfc015de428000000"
module asm ".quad 0xfc019de428000000,0xfc01dde428000000,0x0471dc0328000000,0x0471dc234800c000"
module asm ".quad 0x000001e7188ec000,0x11221ec440000008,0x11225ec41c004001,0xfc37dc231c004001"
module asm ".quad 0x21235c041b0e0000,0x25239c0418040000,0x13f5dc2318040000,0x10d35c001a8e4001"
module asm ".quad 0x10e39c00c8000000,0xf8d35c02c8000000,0xf8e3dc02083fffff,0x35239c04083fffff"
module asm ".quad 0x3d235c0414860000,0x3883dc0314860000,0x34941c0350000000,0x3d23df8450000000"
module asm ".quad 0x41241f841c000000,0x3ce3dc431c000000,0x0d239ec4201c0000,0x40d45c431c000000"
module asm ".quad 0x0d241ec4201a0000,0x38f35c431c000000,0x41145c4350000000,0x3483de0350000000"
module asm ".quad 0x44939e03201c0000,0x3c81dc0320200000,0x10341c83198e0000,0x3893dc0368004001"
module asm ".quad 0x20f3c103198e0000,0x04d3400348000000,0x24e385034800c000,0x20f1dc0348000000"
module asm ".quad 0xfd09dc231b0e0000,0x3893dc031b0e0000,0x04d34003198e0000,0x13f21dc34800c000"
module asm ".quad 0x24e3850368004001,0x13f25dc348000000,0x3523738468004001,0x3923af841c000000"
module asm ".quad 0x34841c041c000000,0x3893dc0420140000,0xfc021de420140000,0x11039d0328000000"
module asm ".quad 0x3d225f8448004001,0x10f3dd031c000000,0x41235f8448004001,0x3cefdc031c000000"
module asm ".quad 0x07f41c23207e0000,0xfcf1dc23329ac000,0xfce3dc23190effff,0x01001c03190effff"
module asm ".quad 0x07f41c2348000000,0x04821c033292c000,0x04f3dc034800c000,0x11011c034800c000"
module asm ".quad 0x07f41c0448000000,0x1c81dc232010c000,0x04e39c03188e0000,0x15015c034800c000"
module asm ".quad 0x07f41c0448000000,0x04d35c032012c000,0x04925c034800c000,0x19019c034800c000"
module asm ".quad 0xe00001e748000000,0x0871dc234003fffd,0x600001e7188e0000,0x80a35ca34003fff7"
module asm ".quad 0xfcd1dc2350004001,0x400001e71a8e0000,0xfc025de440000000,0x60001de728000000"
module asm ".quad 0x0830dd034000000e,0xfc021de448000000,0xfc039de428000000,0x1021dea328000000"
module asm ".quad 0xfc025de420064001,0xfc7fdc0328000000,0x29209ec4207e0000,0xfc83dc231c000000"
module asm ".quad 0x2bf4ddc31b0e0000,0x0920dc0468000000,0x4000000718040000,0x1030dc006000000c"
module asm ".quad 0xf830dc02c8000000,0x0d20dc04083fffff,0x0c23dc0314860000,0x3d241f8450000000"
module asm ".quad 0x2123dec41c000000,0x4030dc431c000000,0x3c341c4320060000,0x2120dec450000000"
module asm ".quad 0x4023de031c004001,0x0d241c04201e0000,0x3c21dc0318040000,0x11041c00198e0000"
module asm ".quad 0x08f3c103c8000000,0xf9041c0248000000,0x3c21dc03083fffff,0x41249c04198e0000"
module asm ".quad 0x08f3c10314860000,0x21209ec448000000,0x48345c031c004001,0x3d23e78450000000"
module asm ".quad 0x09241c041c000000,0x45245f8418040000,0x3d33dc231c000000,0x11041c0031140000"
module asm ".quad 0x45249c43c8000000,0x20f4dc8320240000,0xf9045c0268004001,0x3d241ec4083fffff"
module asm ".quad 0xfd35dc231c000000,0x45245c041b0e0000,0x41249c4314860000,0x4424dc0350000000"
module asm ".quad 0x48341e0350000000,0x4d24df8420200000,0x4031dc031c000000,0x4d14dc43198e0000"
module asm ".quad 0x0d04010320220000,0x3d245ec448000000,0x052480031c000000,0x0d03dc034800c000"
module asm ".quad 0x4534dc431b0e0000,0x23f1dc2350000000,0x052484031a8e4001,0x4c245e034800c000"
module asm ".quad 0x23f0ddc320220000,0x4924ab8468004001,0x4423dc031c000000,0x20041de4198e0000"
module asm ".quad 0x48349c0428004001,0x0914450320100000,0xfd00dc0348000000,0xfcf5dc234800ffff"
module asm ".quad 0x4421dc031b0e0000,0x4833dd03198e0000,0x0914410348000000,0x18f3dc2348000000"
module asm ".quad 0x23f1dc231b0e0000,0x23f09dc31a8e4001,0x45246b8468004001,0x0123dc231c000000"
module asm ".quad 0x44209c041b020000,0x200005e720100000,0xfc009df440000000,0x0830dd0328000000"
module asm ".quad 0x1431dc2348000000,0x1021dc231b0e0000,0x200001e71b000000,0xfc009df440000000"
module asm ".quad 0x2920dec428000000,0x0d23dc041c000000,0x10f3dc0018040000,0xf8f3dc02c8000000"
module asm ".quad 0x3d23dc04083fffff,0x3c341c0314860000,0x41241f8450000000,0x40f3dc431c000000"
module asm ".quad 0x21241ec4201e0000,0x40f3dc431c000000,0x3c341e0350000000,0x4031dc0320200000"
module asm ".quad 0x0d040103198e0000,0x04f3c00348000000,0x0d03dc034800c000,0x2880dc831b0e0000"
module asm ".quad 0x04f3c40368000000,0xfc31dc234800c000,0x2bf0ddc31b0e0000,0x3d23e38468000000"
module asm ".quad 0x3c30dc231c000000,0x1003dde231140000,0x2c30dca318000000,0x08309c03200e0000"
module asm ".quad 0x11209ca348000000,0xe020dca320044001,0x80309ca350004000,0x9030dce3201f8000"
module asm ".quad 0x00209c95209e8000,0x04821c0384000000,0x00e0dc854800c000,0x3481dc03c1000000"
module asm ".quad 0x10e39c03188e0000,0x0c225c004800c000,0x600001e730120000,0xe0c01ca34003fff2"
module asm ".quad 0x1000dde250004000,0xc0009ca318000000,0xd000dce320078000,0x00225c8520868000"
module asm ".quad 0x00001de794000000,0x0000000080000000,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x0000000000000000,0x0000000000000000,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x0000000000000000,0x0000000100000000,0x0000000000000003,0x0000000000000000"
module asm ".quad 0x0000004000000000,0x0000010c00000000,0x0000000000000000,0x0000000100000000"
module asm ".quad 0x0000000000000000,0x0000000b00000000,0x0000000000000003,0x0000000000000000"
module asm ".quad 0x0000014c00000000,0x000001a200000000,0x0000000000000000,0x0000000100000000"
module asm ".quad 0x0000000000000000,0x0000001300000000,0x0000000000000002,0x0000000000000000"
module asm ".quad 0x000002f000000000,0x0000007800000000,0x0000000200000000,0x0000000800000003"
module asm ".quad 0x0000001800000000,0x0000005100000000,0x0000000070000000,0x0000000000000000"
module asm ".quad 0x0000036800000000,0x0000012800000000,0x0000000300000000,0x0000000400000007"
module asm ".quad 0x0000000000000000,0x000000c500000000,0x0000000070000000,0x0000000000000000"
module asm ".quad 0x0000049000000000,0x0000002400000000,0x0000000300000000,0x0000000400000000"
module asm ".quad 0x0000000000000000,0x000000ce00000000,0x0000000200000001,0x0000000000000000"
module asm ".quad 0x000004b400000000,0x0000006d00000000,0x0000000000000000,0x0000000400000007"
module asm ".quad 0x0000000000000000,0x0000001b00000000,0x0010000600000001,0x0000000000000000"
module asm ".quad 0x0000052400000000,0x000008e800000000,0x0000000300000000,0x0000000414000004"
module asm ".quad 0x0000000000000000,0x0000008a00000000,0x0000000300000008,0x0000000000000000"
module asm ".quad 0x00000e0c00000000,0x0000190000000000,0x0000000000000000,0x0000000400000007"
module asm ".quad 0x0000000000000000,0x0000000600000000,0x0000104c00000005,0x0000000000000000"
module asm ".quad 0x0000000000000000,0x000000a800000000,0x000000a800000000,0x0000000800000000"
module asm ".quad 0x0000000100000000,0x000004b400000005,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x0000095500000000,0x0000095500000000,0x0000000800000000,0x0000000100000000"
module asm ".quad 0x00000e0c00000006,0x0000000000000000,0x0000000000000000,0x0000000000000000"
module asm ".quad 0x0000190000000000,0x0000000800000000,0x0000000000000000,0x0000005801010001"
module asm ".quad 0x0000000000000768,0x0000004000000766,0x0000001400040001,0x0000000b00000048"
module asm ".quad 0x0000000000002015,0x0000000000000000,0x00000000000016de,0x0000000000000000"
module asm ".quad 0x6974704f766e6f63,0x000000000075632e,0x762e1cf200010a11,0x34206e6f69737265"
module asm ".quad 0x677261742e0a312e,0x30325f6d73207465,0x7365726464612e0a,0x3620657a69735f73"
module asm ".quad 0x69736921f6002f34,0x746e652e20656c62,0x6f34315a5f207972,0x46766e6f43697470"
module asm ".quad 0x694c497265746c69,0x3053665076454531,0xff0001695f30535f,0x702e0a2862666601"
module asm ".quad 0x36752e206d617261,0x003b5f111d003d34,0x1f3000452c305f3f,0x0045321731004531"
module asm ".quad 0x331f24004532332f,0x310045341f310045,0x45361f310045351f,0x1f310045371f3100"
module asm ".quad 0x0045391f31004538,0x1f32004630312f31,0x3202b50f32004631,0x0046661f02b63117"
module asm ".quad 0xb808320046341f27,0x09f3250045381f02,0x722e0a7b0a290a36,0x646572702e206765"
module asm ".quad 0x3b3e30323c702520,0x2520323373a50013,0x0000133932313c72,0x12313c66254600b2"
module asm ".quad 0x7225203436737200,0x732e090a60003864,0x6c612ebf004a6168,0x622e2034206e6769"
module asm ".quad 0x5f5f2424f21e009f,0x636f6c5f61647563,0x335f7261765f6c61,0x5f35335f33393735"
module asm ".quad 0x736e6f635f6e6f6e,0x34365b5768735f74,0x646c0a0a3b5d3030,0x4f008d752e22010c"
module asm ".quad 0x2d2405685b202c33,0x004e341f004e3b5d,0x351f00004e311f26,0x01004e321926004e"
module asm ".quad 0x1f27009c351f019c,0x27009c0f00004e33,0x4e361f00004e341f,0x1f00004e351f2600"
module asm ".quad 0x004e361f26004e37,0x371f26004e381f00,0x270222391f00004e,0x2e6c756d63018700"
module asm ".quad 0x2c303633036f6f6c,0x0a3b5700060000a1,0x2c3126001d64616d,0x312d202c395c0023"
module asm ".quad 0x00012d2c3223003e,0x7669640a3b540181,0x6300412c3326001a,0x001a6464610a3b32"
module asm ".quad 0x3b31a0001f2c3123,0x746c2e707465730a,0x2c3170250952001a,0x400a3b3108f3001f"
module asm ".quad 0x2061726220317025,0x0a0a3b355f304242,0x3131c700ff766f6d,0x2e64697425202c35"
module asm ".quad 0x0016361000173b78,0xc708001861746333,0x00392c3631314500,0x3b19002f00027701"
module asm ".quad 0x30202c3705f40054,0x742e617476630a3b,0x6c61626f6c672e6f,0x346450003e010344"
module asm ".quad 0x3a322b008e0a0a3b,0xd403012537180104,0x00d4752e65674100,0xd9373621007a3217"
module asm ".quad 0x00530000d9321500,0x6564697743004c00,0x00b22c376434008a,0x2604f20201363413"
module asm ".quad 0x373b372d008b2c38,0xd934130068391500,0x2c30313f00bc0200,0x3134009f09450510"
module asm ".quad 0x01008e00006f2c31,0x05c50201460302b5,0x5d5300c700039f00,0x1b0105b774730a3b"
module asm ".quad 0x2c5d20003e5b1100,0x3a34280163030024,0x000703019c000230,0x2f01130001f23119"
module asm ".quad 0x3836260701f1746e,0x02853631313901f0,0x8b381c0199353128,0xb601007a2c332702"
module asm ".quad 0xa6321301b6331501,0x7261620a3a35d900,0x993020636e79732e,0x02a305028b391900"
module asm ".quad 0x00170600b1303728,0x340100c70f013b00,0x00540200362c3237,0x65720a3b31377284"
module asm ".quad 0x00262c302500c56d,0x5372687334036400,0x31332803d6341400,0x2203ee35372600f7"
module asm ".quad 0x1301110400323437,0x312201640900202c,0x1e0402d502031932,0x15011b02005e0501"
module asm ".quad 0x1203aa371a011b34,0x005337322a037832,0x163415020016351f,0x6e752e6172627100"
module asm ".quad 0x2f016e3114005269,0x03f20830005a3a37,0x1a00600100163815,0x00072c3824027438"
module asm ".quad 0x45001b351804a70d,0x314700ff35702540,0x36383505040a3b31,0x0a3b37357401a62c"
module asm ".quad 0xb53211006067656e,0x382f01cf36382801,0x1b019e0107002f37,0x25019b331200d838"
module asm ".quad 0x482c302500276275,0x3135001b37352900,0x00f4351400922c39,0x652300dc3a303132"
module asm ".quad 0x009e2c362400dc71,0x04c7706c2201f501,0x202c2000ee387220,0x21000349701a0060"
module asm ".quad 0x0a014e0300200202,0x0b00c02c37240051,0x371a005139160051,0xd138120084010051"
module asm ".quad 0x3824005136322c04,0x0052312d2900ea2c,0x52381a0052303926,0x0100200001b20100"
module asm ".quad 0x053b0300520c000d,0x005231160052391e,0x120253010052391a,0x001c34322a06b139"
module asm ".quad 0x0019311a01443215,0x1500190b010c3115,0x311600190a00d430,0x04a00200320b009b"
module asm ".quad 0x2c3027020746321f,0x16074d3831220023,0x2c01fe301402a530,0xfd2c3128003b3a31"
module asm ".quad 0x14078806003a0202,0x392f07030c003938,0x56656e2400070333,0x301200242c322300"
module asm ".quad 0x3431230701060052,0x05b7000624020431,0x090a000130663033,0x3427007e31322404"
module asm ".quad 0x033535392602d93a,0x07f83913089f311c,0x3d2c38343503100e,0x1a00843b36393700"
module asm ".quad 0x3811037008008337,0x5d391f075d0800c2,0x311103088c0f4807,0x0100b3336428016b"
module asm ".quad 0x352703d5661501b0,0xbc2c37393404553a,0x3509a30801a20000,0x38352800212c3135"
module asm ".quad 0x06001a32352a048a,0x2805fb383924027a,0x2c3939360150312d,0x020309053116001e"
module asm ".quad 0x2f0100242c332502,0x8f2c3425001f0b03,0x646e613404430100,0x00410207a1010e21"
module asm ".quad 0x7107024034317032,0x0937130240371a05,0x1802f00502390901,0xb331303137023937"
module asm ".quad 0x05bc030094321d00,0x250020060435311a,0x0804a60101292c37,0x00420200540000b4"
module asm ".quad 0x381600b437317032,0x331300b4391a00b4,0x33312f00c70c00b4,0x01c63a39270500c8"
module asm ".quad 0x0b0a01e23230313b,0x0200262c34303609,0x3036051f341a0bb0,0x4132352d00292c35"
module asm ".quad 0xa33513019e361600,0x3031470369351b06,0x0aa03417002c2c37,0x0101e46412002102"
module asm ".quad 0x0982020ad80a0028,0x0a3a34312e02d804,0x5d35313e0a3a3212,0x303237081e040125"
module asm ".quad 0x3121015301001c3a,0x25430a6a07004b37,0x5d39a9004c303166,0x6e722e616d660a3b"
module asm ".quad 0x0000252c33230344,0x2c392400a70a0011,0x06910305ef0b0007,0x31270bfd02082a0a"
module asm ".quad 0xeb3b33393b019b39,0x3916059e66252404,0x311b00d23514021e,0x09ef343131360565"
module asm ".quad 0x230206042134352f,0x4803000183351f0c,0x2c38270183341d0b,0x070ba2373121003a"
module asm ".quad 0xa238110132010183,0x746572900b46000b,0x00000a0a0a7d0a3b"
module asm ".text"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.__fatBinC_Wrapper_t = type { i32, i32, i64*, i8* }
%struct.dim3 = type { i32, i32, i32 }
%struct.CUstream_st = type opaque
%struct.uint3 = type { i32, i32, i32 }

@_ZZ4mainE12filename_img = private unnamed_addr constant [1024 x i8] c"image.test.dataalign 16 ; [#uses=1 type=[1024 x i8]*]
@_ZZ4mainE15filename_filter = private unnamed_addr constant [1024 x i8] c"filter.test.data\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16 ; [#uses=1 type=[1024 x i8]*]
@_ZZ4mainE19filename_targetInit = private unnamed_addr constant [1024 x i8] c"targetInit.test.dataalign 16 ; [#uses=1 type=[1024 x i8]*]
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1 ; [#uses=1 type=[4 x i8]*]
@.str1 = private unnamed_addr constant [8 x i8] c"ERROR ~\00", align 1 ; [#uses=1 type=[8 x i8]*]
@stdout = external global %struct._IO_FILE*       ; [#uses=8 type=%struct._IO_FILE**]
@.str2 = private unnamed_addr constant [84 x i8] c"numGroups > 1 || (numImgColors > 0 && (numImgColors <= 3 || numImgColors % 2 == 0))\00", align 1 ; [#uses=1 type=[84 x i8]*]
@.str3 = private unnamed_addr constant [12 x i8] c"convOpti.cu\00", align 1 ; [#uses=1 type=[12 x i8]*]
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [11 x i8] c"int main()\00", align 1 ; [#uses=1 type=[11 x i8]*]
@.str4 = private unnamed_addr constant [43 x i8] c"numGroups == 1 || numFilterColors % 2 == 0\00", align 1 ; [#uses=1 type=[43 x i8]*]
@.str5 = private unnamed_addr constant [35 x i8] c"numFilters % (16 * numGroups) == 0\00", align 1 ; [#uses=1 type=[35 x i8]*]
@.str6 = private unnamed_addr constant [30 x i8] c"numImgColors % numGroups == 0\00", align 1 ; [#uses=1 type=[30 x i8]*]
@.str7 = private unnamed_addr constant [33 x i8] c"9216 == imgPixels * numImgColors\00", align 1 ; [#uses=1 type=[33 x i8]*]
@.str8 = private unnamed_addr constant [33 x i8] c"imgSizeY * imgSizeX == imgPixels\00", align 1 ; [#uses=1 type=[33 x i8]*]
@.str9 = private unnamed_addr constant [40 x i8] c"filterSize * filterSize == filterPixels\00", align 1 ; [#uses=1 type=[40 x i8]*]
@.str10 = private unnamed_addr constant [58 x i8] c"1600 == filterModuleMult * numFilterColors * filterPixels\00", align 1 ; [#uses=1 type=[58 x i8]*]
@.str11 = private unnamed_addr constant [18 x i8] c"paddingStart <= 0\00", align 1 ; [#uses=1 type=[18 x i8]*]
@.str12 = private unnamed_addr constant [69 x i8] c"paddingStart + (numModulesX-1)*moduleStride + filterSize >= imgSizeX\00", align 1 ; [#uses=1 type=[69 x i8]*]
@.str13 = private unnamed_addr constant [69 x i8] c"paddingStart + (numModulesY-1)*moduleStride + filterSize >= imgSizeY\00", align 1 ; [#uses=1 type=[69 x i8]*]
@.str14 = private unnamed_addr constant [27 x i8] c"moduleStride <= filterSize\00", align 1 ; [#uses=1 type=[27 x i8]*]
@.str15 = private unnamed_addr constant [32 x i8] c"9216 == numFilters * numModules\00", align 1 ; [#uses=1 type=[32 x i8]*]
@.str16 = private unnamed_addr constant [15 x i8] c"1 == numImages\00", align 1 ; [#uses=1 type=[15 x i8]*]
@.str17 = private unnamed_addr constant [75 x i8] c"imgSizeY == 12 && imgSizeX == 12 && numModulesY == 12 && numModulesX == 12\00", align 1 ; [#uses=1 type=[75 x i8]*]
@.str18 = private unnamed_addr constant [38 x i8] c"filterSize == 5 && paddingStart == -2\00", align 1 ; [#uses=1 type=[38 x i8]*]
@.str19 = private unnamed_addr constant [17 x i8] c"numFilters == 64\00", align 1 ; [#uses=1 type=[17 x i8]*]
@.str20 = private unnamed_addr constant [19 x i8] c"numImgColors == 64\00", align 1 ; [#uses=1 type=[19 x i8]*]
@.str21 = private unnamed_addr constant [15 x i8] c"numGroups == 1\00", align 1 ; [#uses=1 type=[15 x i8]*]
@.str22 = private unnamed_addr constant [20 x i8] c"scaleTargets == 0.0\00", align 1 ; [#uses=1 type=[20 x i8]*]
@.str23 = private unnamed_addr constant [19 x i8] c"scaleOutput == 1.0\00", align 1 ; [#uses=1 type=[19 x i8]*]
@.str24 = private unnamed_addr constant [25 x i8] c"numFiltersPerGroup == 64\00", align 1 ; [#uses=1 type=[25 x i8]*]
@.str25 = private unnamed_addr constant [45 x i8] c"imgsPerThread == 1 && checkImgBounds == true\00", align 1 ; [#uses=1 type=[45 x i8]*]
@.str26 = private unnamed_addr constant [52 x i8] c"ERROR !! this should no mini version(i.e. --mini=1)\00", align 1 ; [#uses=1 type=[52 x i8]*]
@.str27 = private unnamed_addr constant [3 x i8] c"r+\00", align 1 ; [#uses=1 type=[3 x i8]*]
@.str28 = private unnamed_addr constant [18 x i8] c"No such file: %s\0A\00", align 1 ; [#uses=1 type=[18 x i8]*]
@.str29 = private unnamed_addr constant [4 x i8] c"%f \00", align 1 ; [#uses=1 type=[4 x i8]*]
@.str30 = private unnamed_addr constant [7 x i8] c"scanf:\00", align 1 ; [#uses=1 type=[7 x i8]*]
@.str31 = private unnamed_addr constant [11 x i8] c"No match.\0A\00", align 1 ; [#uses=1 type=[11 x i8]*]
@.str32 = private unnamed_addr constant [7 x i8] c"%.15f \00", align 1 ; [#uses=1 type=[7 x i8]*]
@.str33 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1 ; [#uses=1 type=[2 x i8]*]
@_Z15__fatDeviceText = internal constant %struct.__fatBinC_Wrapper_t { i32 1180844977, i32 1, i64* getelementptr inbounds ([803 x i64]* @fatbinData, i32 0, i32 0), i8* null }, section ".nvFatBinSegment", align 8 ; [#uses=1 type=%struct.__fatBinC_Wrapper_t*]
@_ZL20__cudaFatCubinHandle = internal global i8** null, align 8 ; [#uses=4 type=i8***]
@_ZZL61__device_stub__Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffbPfS_S_iiiiiiiiiiiffbE3__f = internal global i8* null, align 8 ; [#uses=1 type=i8**]
@_ZZL22____nv_dummy_param_refPvE5__ref = internal global i8** null, align 8 ; [#uses=1 type=i8***]
@_ZZL31__nv_cudaEntityRegisterCallbackPPvE5__ref = internal global i8** null, align 8 ; [#uses=1 type=i8***]
@.str34 = private unnamed_addr constant [48 x i8] c"_Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffb\00", align 1 ; [#uses=1 type=[48 x i8]*]
@_ZL32__nv_fatbinhandle_for_managed_rt = internal global i8** null, align 8 ; [#uses=1 type=i8***]
@fatbinData = external constant [803 x i64]       ; [#uses=1 type=[803 x i64]*]
@llvm.global_ctors = appending global [1 x { i32, void ()* }] [{ i32, void ()* } { i32 65535, void ()* @_ZL76__sti____cudaRegisterAll_43_tmpxft_000019dc_00000000_6_convOpti_cpp1_ii_mainv }] ; [#uses=0 type=[1 x { i32, void ()* }]*]

; [#uses=0]
; Function Attrs: uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4                   ; [#uses=1 type=i32*]
  %err = alloca i32, align 4                      ; [#uses=14 type=i32*]
  %filename_img = alloca [1024 x i8], align 16    ; [#uses=2 type=[1024 x i8]*]
  %filename_filter = alloca [1024 x i8], align 16 ; [#uses=2 type=[1024 x i8]*]
  %filename_targetInit = alloca [1024 x i8], align 16 ; [#uses=2 type=[1024 x i8]*]
  %images_h = alloca float*, align 8              ; [#uses=2 type=float**]
  %images_d = alloca float*, align 8              ; [#uses=4 type=float**]
  %filters_h = alloca float*, align 8             ; [#uses=2 type=float**]
  %filters_d = alloca float*, align 8             ; [#uses=4 type=float**]
  %targets_h = alloca float*, align 8             ; [#uses=4 type=float**]
  %targets_d = alloca float*, align 8             ; [#uses=5 type=float**]
  %imgSizeY = alloca i32, align 4                 ; [#uses=6 type=i32*]
  %numModulesY = alloca i32, align 4              ; [#uses=5 type=i32*]
  %numModulesX = alloca i32, align 4              ; [#uses=5 type=i32*]
  %paddingStart = alloca i32, align 4             ; [#uses=6 type=i32*]
  %moduleStride = alloca i32, align 4             ; [#uses=5 type=i32*]
  %numImgColors = alloca i32, align 4             ; [#uses=10 type=i32*]
  %numGroups = alloca i32, align 4                ; [#uses=8 type=i32*]
  %scaleTargets = alloca float, align 4           ; [#uses=4 type=float*]
  %scaleOutput = alloca float, align 4            ; [#uses=3 type=float*]
  %conv = alloca i8, align 1                      ; [#uses=3 type=i8*]
  %numFilterColors = alloca i32, align 4          ; [#uses=4 type=i32*]
  %numFilters = alloca i32, align 4               ; [#uses=6 type=i32*]
  %numModules = alloca i32, align 4               ; [#uses=3 type=i32*]
  %numImages = alloca i32, align 4                ; [#uses=7 type=i32*]
  %imgPixels = alloca i32, align 4                ; [#uses=4 type=i32*]
  %imgSizeX = alloca i32, align 4                 ; [#uses=5 type=i32*]
  %filterModuleMult = alloca i32, align 4         ; [#uses=3 type=i32*]
  %numFiltersPerGroup = alloca i32, align 4       ; [#uses=2 type=i32*]
  %imgStride = alloca i32, align 4                ; [#uses=3 type=i32*]
  %filterPixels = alloca i32, align 4             ; [#uses=4 type=i32*]
  %filterSize = alloca i32, align 4               ; [#uses=8 type=i32*]
  %imgsPerThread = alloca i32, align 4            ; [#uses=3 type=i32*]
  %checkImgBounds = alloca i8, align 1            ; [#uses=2 type=i8*]
  %blocks = alloca %struct.dim3, align 4          ; [#uses=2 type=%struct.dim3*]
  %threads = alloca %struct.dim3, align 4         ; [#uses=2 type=%struct.dim3*]
  %i = alloca i32, align 4                        ; [#uses=4 type=i32*]
  %agg.tmp = alloca %struct.dim3, align 4         ; [#uses=2 type=%struct.dim3*]
  %agg.tmp209 = alloca %struct.dim3, align 4      ; [#uses=2 type=%struct.dim3*]
  %agg.tmp.coerce = alloca { i64, i32 }           ; [#uses=3 type={ i64, i32 }*]
  %agg.tmp209.coerce = alloca { i64, i32 }        ; [#uses=3 type={ i64, i32 }*]
  store i32 0, i32* %retval
  %0 = bitcast [1024 x i8]* %filename_img to i8*  ; [#uses=1 type=i8*]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* getelementptr inbounds ([1024 x i8]* @_ZZ4mainE12filename_img, i32 0, i32 0), i64 1024, i32 16, i1 false)
  %1 = bitcast [1024 x i8]* %filename_filter to i8* ; [#uses=1 type=i8*]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([1024 x i8]* @_ZZ4mainE15filename_filter, i32 0, i32 0), i64 1024, i32 16, i1 false)
  %2 = bitcast [1024 x i8]* %filename_targetInit to i8* ; [#uses=1 type=i8*]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* getelementptr inbounds ([1024 x i8]* @_ZZ4mainE19filename_targetInit, i32 0, i32 0), i64 1024, i32 16, i1 false)
  %arraydecay = getelementptr inbounds [1024 x i8]* %filename_img, i32 0, i32 0 ; [#uses=1 type=i8*]
  %call = call float* @_Z10readMatrixPcii(i8* %arraydecay, i32 9216, i32 1) ; [#uses=1 type=float*]
  store float* %call, float** %images_h, align 8
  store float* null, float** %images_d, align 8
  %arraydecay1 = getelementptr inbounds [1024 x i8]* %filename_filter, i32 0, i32 0 ; [#uses=1 type=i8*]
  %call2 = call float* @_Z10readMatrixPcii(i8* %arraydecay1, i32 1600, i32 64) ; [#uses=1 type=float*]
  store float* %call2, float** %filters_h, align 8
  store float* null, float** %filters_d, align 8
  %3 = bitcast float** %images_d to i8**          ; [#uses=1 type=i8**]
  %call3 = call i32 @cudaMalloc(i8** %3, i64 36864) ; [#uses=1 type=i32]
  store i32 %call3, i32* %err, align 4
  %4 = load i32* %err, align 4                    ; [#uses=1 type=i32]
  %cmp = icmp ne i32 %4, 0                        ; [#uses=1 type=i1]
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %call4 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str1, i32 0, i32 0)) ; [#uses=0 type=i32]
  %5 = load %struct._IO_FILE** @stdout, align 8   ; [#uses=1 type=%struct._IO_FILE*]
  %call5 = call i32 @fflush(%struct._IO_FILE* %5) ; [#uses=0 type=i32]
  call void @exit(i32 1) #9
  unreachable

do.end:                                           ; No predecessors!
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %6 = load float** %images_d, align 8            ; [#uses=1 type=float*]
  %7 = bitcast float* %6 to i8*                   ; [#uses=1 type=i8*]
  %8 = load float** %images_h, align 8            ; [#uses=1 type=float*]
  %9 = bitcast float* %8 to i8*                   ; [#uses=1 type=i8*]
  %call6 = call i32 @cudaMemcpy(i8* %7, i8* %9, i64 36864, i32 1) ; [#uses=1 type=i32]
  store i32 %call6, i32* %err, align 4
  %10 = load i32* %err, align 4                   ; [#uses=1 type=i32]
  %cmp7 = icmp ne i32 %10, 0                      ; [#uses=1 type=i1]
  br i1 %cmp7, label %if.then8, label %if.end13

if.then8:                                         ; preds = %if.end
  br label %do.body9

do.body9:                                         ; preds = %if.then8
  %call10 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str1, i32 0, i32 0)) ; [#uses=0 type=i32]
  %11 = load %struct._IO_FILE** @stdout, align 8  ; [#uses=1 type=%struct._IO_FILE*]
  %call11 = call i32 @fflush(%struct._IO_FILE* %11) ; [#uses=0 type=i32]
  call void @exit(i32 1) #9
  unreachable

do.end12:                                         ; No predecessors!
  br label %if.end13

if.end13:                                         ; preds = %do.end12, %if.end
  %12 = bitcast float** %filters_d to i8**        ; [#uses=1 type=i8**]
  %call14 = call i32 @cudaMalloc(i8** %12, i64 409600) ; [#uses=1 type=i32]
  store i32 %call14, i32* %err, align 4
  %13 = load i32* %err, align 4                   ; [#uses=1 type=i32]
  %cmp15 = icmp ne i32 %13, 0                     ; [#uses=1 type=i1]
  br i1 %cmp15, label %if.then16, label %if.end21

if.then16:                                        ; preds = %if.end13
  br label %do.body17

do.body17:                                        ; preds = %if.then16
  %call18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str1, i32 0, i32 0)) ; [#uses=0 type=i32]
  %14 = load %struct._IO_FILE** @stdout, align 8  ; [#uses=1 type=%struct._IO_FILE*]
  %call19 = call i32 @fflush(%struct._IO_FILE* %14) ; [#uses=0 type=i32]
  call void @exit(i32 1) #9
  unreachable

do.end20:                                         ; No predecessors!
  br label %if.end21

if.end21:                                         ; preds = %do.end20, %if.end13
  %15 = load float** %filters_d, align 8          ; [#uses=1 type=float*]
  %16 = bitcast float* %15 to i8*                 ; [#uses=1 type=i8*]
  %17 = load float** %filters_h, align 8          ; [#uses=1 type=float*]
  %18 = bitcast float* %17 to i8*                 ; [#uses=1 type=i8*]
  %call22 = call i32 @cudaMemcpy(i8* %16, i8* %18, i64 409600, i32 1) ; [#uses=1 type=i32]
  store i32 %call22, i32* %err, align 4
  %19 = load i32* %err, align 4                   ; [#uses=1 type=i32]
  %cmp23 = icmp ne i32 %19, 0                     ; [#uses=1 type=i1]
  br i1 %cmp23, label %if.then24, label %if.end29

if.then24:                                        ; preds = %if.end21
  br label %do.body25

do.body25:                                        ; preds = %if.then24
  %call26 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str1, i32 0, i32 0)) ; [#uses=0 type=i32]
  %20 = load %struct._IO_FILE** @stdout, align 8  ; [#uses=1 type=%struct._IO_FILE*]
  %call27 = call i32 @fflush(%struct._IO_FILE* %20) ; [#uses=0 type=i32]
  call void @exit(i32 1) #9
  unreachable

do.end28:                                         ; No predecessors!
  br label %if.end29

if.end29:                                         ; preds = %do.end28, %if.end21
  %arraydecay30 = getelementptr inbounds [1024 x i8]* %filename_targetInit, i32 0, i32 0 ; [#uses=1 type=i8*]
  %call31 = call float* @_Z10readMatrixPcii(i8* %arraydecay30, i32 9216, i32 1) ; [#uses=1 type=float*]
  store float* %call31, float** %targets_h, align 8
  store float* null, float** %targets_d, align 8
  %21 = bitcast float** %targets_d to i8**        ; [#uses=1 type=i8**]
  %call32 = call i32 @cudaMalloc(i8** %21, i64 36864) ; [#uses=1 type=i32]
  store i32 %call32, i32* %err, align 4
  %22 = load i32* %err, align 4                   ; [#uses=1 type=i32]
  %cmp33 = icmp ne i32 %22, 0                     ; [#uses=1 type=i1]
  br i1 %cmp33, label %if.then34, label %if.end39

if.then34:                                        ; preds = %if.end29
  br label %do.body35

do.body35:                                        ; preds = %if.then34
  %call36 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str1, i32 0, i32 0)) ; [#uses=0 type=i32]
  %23 = load %struct._IO_FILE** @stdout, align 8  ; [#uses=1 type=%struct._IO_FILE*]
  %call37 = call i32 @fflush(%struct._IO_FILE* %23) ; [#uses=0 type=i32]
  call void @exit(i32 1) #9
  unreachable

do.end38:                                         ; No predecessors!
  br label %if.end39

if.end39:                                         ; preds = %do.end38, %if.end29
  %24 = load float** %targets_d, align 8          ; [#uses=1 type=float*]
  %25 = bitcast float* %24 to i8*                 ; [#uses=1 type=i8*]
  %26 = load float** %targets_h, align 8          ; [#uses=1 type=float*]
  %27 = bitcast float* %26 to i8*                 ; [#uses=1 type=i8*]
  %call40 = call i32 @cudaMemcpy(i8* %25, i8* %27, i64 36864, i32 1) ; [#uses=1 type=i32]
  store i32 %call40, i32* %err, align 4
  %28 = load i32* %err, align 4                   ; [#uses=1 type=i32]
  %cmp41 = icmp ne i32 %28, 0                     ; [#uses=1 type=i1]
  br i1 %cmp41, label %if.then42, label %if.end47

if.then42:                                        ; preds = %if.end39
  br label %do.body43

do.body43:                                        ; preds = %if.then42
  %call44 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str1, i32 0, i32 0)) ; [#uses=0 type=i32]
  %29 = load %struct._IO_FILE** @stdout, align 8  ; [#uses=1 type=%struct._IO_FILE*]
  %call45 = call i32 @fflush(%struct._IO_FILE* %29) ; [#uses=0 type=i32]
  call void @exit(i32 1) #9
  unreachable

do.end46:                                         ; No predecessors!
  br label %if.end47

if.end47:                                         ; preds = %do.end46, %if.end39
  store i32 12, i32* %imgSizeY, align 4
  store i32 12, i32* %numModulesY, align 4
  store i32 12, i32* %numModulesX, align 4
  store i32 -2, i32* %paddingStart, align 4
  store i32 1, i32* %moduleStride, align 4
  store i32 64, i32* %numImgColors, align 4
  store i32 1, i32* %numGroups, align 4
  store float 0.000000e+00, float* %scaleTargets, align 4
  store float 1.000000e+00, float* %scaleOutput, align 4
  store i8 1, i8* %conv, align 1
  %30 = load i32* %numImgColors, align 4          ; [#uses=1 type=i32]
  %31 = load i32* %numGroups, align 4             ; [#uses=1 type=i32]
  %div = sdiv i32 %30, %31                        ; [#uses=1 type=i32]
  store i32 %div, i32* %numFilterColors, align 4
  store i32 64, i32* %numFilters, align 4
  %32 = load i32* %numModulesY, align 4           ; [#uses=1 type=i32]
  %33 = load i32* %numModulesX, align 4           ; [#uses=1 type=i32]
  %mul = mul nsw i32 %32, %33                     ; [#uses=1 type=i32]
  store i32 %mul, i32* %numModules, align 4
  store i32 1, i32* %numImages, align 4
  %34 = load i32* %numImgColors, align 4          ; [#uses=1 type=i32]
  %div48 = sdiv i32 9216, %34                     ; [#uses=1 type=i32]
  store i32 %div48, i32* %imgPixels, align 4
  %35 = load i32* %imgPixels, align 4             ; [#uses=1 type=i32]
  %36 = load i32* %imgSizeY, align 4              ; [#uses=1 type=i32]
  %div49 = sdiv i32 %35, %36                      ; [#uses=1 type=i32]
  store i32 %div49, i32* %imgSizeX, align 4
  %37 = load i8* %conv, align 1                   ; [#uses=1 type=i8]
  %tobool = trunc i8 %37 to i1                    ; [#uses=1 type=i1]
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end47
  br label %cond.end

cond.false:                                       ; preds = %if.end47
  %38 = load i32* %numModules, align 4            ; [#uses=1 type=i32]
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ %38, %cond.false ] ; [#uses=1 type=i32]
  store i32 %cond, i32* %filterModuleMult, align 4
  %39 = load i32* %numGroups, align 4             ; [#uses=1 type=i32]
  %cmp50 = icmp sgt i32 %39, 1                    ; [#uses=1 type=i1]
  br i1 %cmp50, label %cond.true55, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %40 = load i32* %numImgColors, align 4          ; [#uses=1 type=i32]
  %cmp51 = icmp sgt i32 %40, 0                    ; [#uses=1 type=i1]
  br i1 %cmp51, label %land.lhs.true, label %cond.false56

land.lhs.true:                                    ; preds = %lor.lhs.false
  %41 = load i32* %numImgColors, align 4          ; [#uses=1 type=i32]
  %cmp52 = icmp sle i32 %41, 3                    ; [#uses=1 type=i1]
  br i1 %cmp52, label %cond.true55, label %lor.lhs.false53

lor.lhs.false53:                                  ; preds = %land.lhs.true
  %42 = load i32* %numImgColors, align 4          ; [#uses=1 type=i32]
  %rem = srem i32 %42, 2                          ; [#uses=1 type=i32]
  %cmp54 = icmp eq i32 %rem, 0                    ; [#uses=1 type=i1]
  br i1 %cmp54, label %cond.true55, label %cond.false56

cond.true55:                                      ; preds = %lor.lhs.false53, %land.lhs.true, %cond.end
  br label %cond.end57

cond.false56:                                     ; preds = %lor.lhs.false53, %lor.lhs.false
  call void @__assert_fail(i8* getelementptr inbounds ([84 x i8]* @.str2, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 100, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end57

cond.end57:                                       ; preds = %43, %cond.true55
  %44 = load i32* %numGroups, align 4             ; [#uses=1 type=i32]
  %cmp58 = icmp eq i32 %44, 1                     ; [#uses=1 type=i1]
  br i1 %cmp58, label %cond.true62, label %lor.lhs.false59

lor.lhs.false59:                                  ; preds = %cond.end57
  %45 = load i32* %numFilterColors, align 4       ; [#uses=1 type=i32]
  %rem60 = srem i32 %45, 2                        ; [#uses=1 type=i32]
  %cmp61 = icmp eq i32 %rem60, 0                  ; [#uses=1 type=i1]
  br i1 %cmp61, label %cond.true62, label %cond.false63

cond.true62:                                      ; preds = %lor.lhs.false59, %cond.end57
  br label %cond.end64

cond.false63:                                     ; preds = %lor.lhs.false59
  call void @__assert_fail(i8* getelementptr inbounds ([43 x i8]* @.str4, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 101, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end64

cond.end64:                                       ; preds = %46, %cond.true62
  %47 = load i32* %numFilters, align 4            ; [#uses=1 type=i32]
  %48 = load i32* %numGroups, align 4             ; [#uses=1 type=i32]
  %mul65 = mul nsw i32 16, %48                    ; [#uses=1 type=i32]
  %rem66 = srem i32 %47, %mul65                   ; [#uses=1 type=i32]
  %cmp67 = icmp eq i32 %rem66, 0                  ; [#uses=1 type=i1]
  br i1 %cmp67, label %cond.true68, label %cond.false69

cond.true68:                                      ; preds = %cond.end64
  br label %cond.end70

cond.false69:                                     ; preds = %cond.end64
  call void @__assert_fail(i8* getelementptr inbounds ([35 x i8]* @.str5, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 102, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end70

cond.end70:                                       ; preds = %49, %cond.true68
  %50 = load i32* %numImgColors, align 4          ; [#uses=1 type=i32]
  %51 = load i32* %numGroups, align 4             ; [#uses=1 type=i32]
  %rem71 = srem i32 %50, %51                      ; [#uses=1 type=i32]
  %cmp72 = icmp eq i32 %rem71, 0                  ; [#uses=1 type=i1]
  br i1 %cmp72, label %cond.true73, label %cond.false74

cond.true73:                                      ; preds = %cond.end70
  br label %cond.end75

cond.false74:                                     ; preds = %cond.end70
  call void @__assert_fail(i8* getelementptr inbounds ([30 x i8]* @.str6, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 103, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end75

cond.end75:                                       ; preds = %52, %cond.true73
  %53 = load i32* %imgPixels, align 4             ; [#uses=1 type=i32]
  %54 = load i32* %numImgColors, align 4          ; [#uses=1 type=i32]
  %mul76 = mul nsw i32 %53, %54                   ; [#uses=1 type=i32]
  %cmp77 = icmp eq i32 9216, %mul76               ; [#uses=1 type=i1]
  br i1 %cmp77, label %cond.true78, label %cond.false79

cond.true78:                                      ; preds = %cond.end75
  br label %cond.end80

cond.false79:                                     ; preds = %cond.end75
  call void @__assert_fail(i8* getelementptr inbounds ([33 x i8]* @.str7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 104, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end80

cond.end80:                                       ; preds = %55, %cond.true78
  %56 = load i32* %imgSizeY, align 4              ; [#uses=1 type=i32]
  %57 = load i32* %imgSizeX, align 4              ; [#uses=1 type=i32]
  %mul81 = mul nsw i32 %56, %57                   ; [#uses=1 type=i32]
  %58 = load i32* %imgPixels, align 4             ; [#uses=1 type=i32]
  %cmp82 = icmp eq i32 %mul81, %58                ; [#uses=1 type=i1]
  br i1 %cmp82, label %cond.true83, label %cond.false84

cond.true83:                                      ; preds = %cond.end80
  br label %cond.end85

cond.false84:                                     ; preds = %cond.end80
  call void @__assert_fail(i8* getelementptr inbounds ([33 x i8]* @.str8, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 105, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end85

cond.end85:                                       ; preds = %59, %cond.true83
  %60 = load i32* %numFilters, align 4            ; [#uses=1 type=i32]
  %61 = load i32* %numGroups, align 4             ; [#uses=1 type=i32]
  %div86 = sdiv i32 %60, %61                      ; [#uses=1 type=i32]
  store i32 %div86, i32* %numFiltersPerGroup, align 4
  store i32 1, i32* %imgStride, align 4
  %62 = load i32* %filterModuleMult, align 4      ; [#uses=1 type=i32]
  %63 = load i32* %numFilterColors, align 4       ; [#uses=1 type=i32]
  %mul87 = mul nsw i32 %62, %63                   ; [#uses=1 type=i32]
  %div88 = sdiv i32 1600, %mul87                  ; [#uses=1 type=i32]
  store i32 %div88, i32* %filterPixels, align 4
  %64 = load i32* %filterPixels, align 4          ; [#uses=1 type=i32]
  %call89 = call double @_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 %64) ; [#uses=1 type=double]
  %conv90 = fptosi double %call89 to i32          ; [#uses=1 type=i32]
  store i32 %conv90, i32* %filterSize, align 4
  %65 = load i32* %filterSize, align 4            ; [#uses=1 type=i32]
  %66 = load i32* %filterSize, align 4            ; [#uses=1 type=i32]
  %mul91 = mul nsw i32 %65, %66                   ; [#uses=1 type=i32]
  %67 = load i32* %filterPixels, align 4          ; [#uses=1 type=i32]
  %cmp92 = icmp eq i32 %mul91, %67                ; [#uses=1 type=i1]
  br i1 %cmp92, label %cond.true93, label %cond.false94

cond.true93:                                      ; preds = %cond.end85
  br label %cond.end95

cond.false94:                                     ; preds = %cond.end85
  call void @__assert_fail(i8* getelementptr inbounds ([40 x i8]* @.str9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 112, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end95

cond.end95:                                       ; preds = %68, %cond.true93
  %69 = load i32* %filterModuleMult, align 4      ; [#uses=1 type=i32]
  %70 = load i32* %numFilterColors, align 4       ; [#uses=1 type=i32]
  %mul96 = mul nsw i32 %69, %70                   ; [#uses=1 type=i32]
  %71 = load i32* %filterPixels, align 4          ; [#uses=1 type=i32]
  %mul97 = mul nsw i32 %mul96, %71                ; [#uses=1 type=i32]
  %cmp98 = icmp eq i32 1600, %mul97               ; [#uses=1 type=i1]
  br i1 %cmp98, label %cond.true99, label %cond.false100

cond.true99:                                      ; preds = %cond.end95
  br label %cond.end101

cond.false100:                                    ; preds = %cond.end95
  call void @__assert_fail(i8* getelementptr inbounds ([58 x i8]* @.str10, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 113, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end101

cond.end101:                                      ; preds = %72, %cond.true99
  %73 = load i32* %paddingStart, align 4          ; [#uses=1 type=i32]
  %cmp102 = icmp sle i32 %73, 0                   ; [#uses=1 type=i1]
  br i1 %cmp102, label %cond.true103, label %cond.false104

cond.true103:                                     ; preds = %cond.end101
  br label %cond.end105

cond.false104:                                    ; preds = %cond.end101
  call void @__assert_fail(i8* getelementptr inbounds ([18 x i8]* @.str11, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 116, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end105

cond.end105:                                      ; preds = %74, %cond.true103
  %75 = load i32* %paddingStart, align 4          ; [#uses=1 type=i32]
  %76 = load i32* %numModulesX, align 4           ; [#uses=1 type=i32]
  %sub = sub nsw i32 %76, 1                       ; [#uses=1 type=i32]
  %77 = load i32* %moduleStride, align 4          ; [#uses=1 type=i32]
  %mul106 = mul nsw i32 %sub, %77                 ; [#uses=1 type=i32]
  %add = add nsw i32 %75, %mul106                 ; [#uses=1 type=i32]
  %78 = load i32* %filterSize, align 4            ; [#uses=1 type=i32]
  %add107 = add nsw i32 %add, %78                 ; [#uses=1 type=i32]
  %79 = load i32* %imgSizeX, align 4              ; [#uses=1 type=i32]
  %cmp108 = icmp sge i32 %add107, %79             ; [#uses=1 type=i1]
  br i1 %cmp108, label %cond.true109, label %cond.false110

cond.true109:                                     ; preds = %cond.end105
  br label %cond.end111

cond.false110:                                    ; preds = %cond.end105
  call void @__assert_fail(i8* getelementptr inbounds ([69 x i8]* @.str12, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 117, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end111

cond.end111:                                      ; preds = %80, %cond.true109
  %81 = load i32* %paddingStart, align 4          ; [#uses=1 type=i32]
  %82 = load i32* %numModulesY, align 4           ; [#uses=1 type=i32]
  %sub112 = sub nsw i32 %82, 1                    ; [#uses=1 type=i32]
  %83 = load i32* %moduleStride, align 4          ; [#uses=1 type=i32]
  %mul113 = mul nsw i32 %sub112, %83              ; [#uses=1 type=i32]
  %add114 = add nsw i32 %81, %mul113              ; [#uses=1 type=i32]
  %84 = load i32* %filterSize, align 4            ; [#uses=1 type=i32]
  %add115 = add nsw i32 %add114, %84              ; [#uses=1 type=i32]
  %85 = load i32* %imgSizeY, align 4              ; [#uses=1 type=i32]
  %cmp116 = icmp sge i32 %add115, %85             ; [#uses=1 type=i1]
  br i1 %cmp116, label %cond.true117, label %cond.false118

cond.true117:                                     ; preds = %cond.end111
  br label %cond.end119

cond.false118:                                    ; preds = %cond.end111
  call void @__assert_fail(i8* getelementptr inbounds ([69 x i8]* @.str13, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 118, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end119

cond.end119:                                      ; preds = %86, %cond.true117
  %87 = load i32* %moduleStride, align 4          ; [#uses=1 type=i32]
  %88 = load i32* %filterSize, align 4            ; [#uses=1 type=i32]
  %cmp120 = icmp sle i32 %87, %88                 ; [#uses=1 type=i1]
  br i1 %cmp120, label %cond.true121, label %cond.false122

cond.true121:                                     ; preds = %cond.end119
  br label %cond.end123

cond.false122:                                    ; preds = %cond.end119
  call void @__assert_fail(i8* getelementptr inbounds ([27 x i8]* @.str14, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 119, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end123

cond.end123:                                      ; preds = %89, %cond.true121
  %90 = load i32* %numImages, align 4             ; [#uses=1 type=i32]
  %rem124 = srem i32 %90, 128                     ; [#uses=1 type=i32]
  %cmp125 = icmp eq i32 %rem124, 0                ; [#uses=1 type=i1]
  br i1 %cmp125, label %cond.true126, label %cond.false127

cond.true126:                                     ; preds = %cond.end123
  br label %cond.end131

cond.false127:                                    ; preds = %cond.end123
  %91 = load i32* %numImages, align 4             ; [#uses=1 type=i32]
  %rem128 = srem i32 %91, 64                      ; [#uses=1 type=i32]
  %cmp129 = icmp eq i32 %rem128, 0                ; [#uses=1 type=i1]
  %cond130 = select i1 %cmp129, i32 2, i32 1      ; [#uses=1 type=i32]
  br label %cond.end131

cond.end131:                                      ; preds = %cond.false127, %cond.true126
  %cond132 = phi i32 [ 4, %cond.true126 ], [ %cond130, %cond.false127 ] ; [#uses=1 type=i32]
  store i32 %cond132, i32* %imgsPerThread, align 4
  %92 = load i32* %numImages, align 4             ; [#uses=1 type=i32]
  %93 = load i32* %imgsPerThread, align 4         ; [#uses=1 type=i32]
  %mul133 = mul nsw i32 32, %93                   ; [#uses=1 type=i32]
  %rem134 = srem i32 %92, %mul133                 ; [#uses=1 type=i32]
  %cmp135 = icmp ne i32 %rem134, 0                ; [#uses=1 type=i1]
  %frombool = zext i1 %cmp135 to i8               ; [#uses=1 type=i8]
  store i8 %frombool, i8* %checkImgBounds, align 1
  %94 = load float* %scaleTargets, align 4        ; [#uses=1 type=float]
  %cmp136 = fcmp oeq float %94, 0.000000e+00      ; [#uses=1 type=i1]
  br i1 %cmp136, label %if.then137, label %if.else

if.then137:                                       ; preds = %cond.end131
  br label %if.end147

if.else:                                          ; preds = %cond.end131
  %95 = load i32* %numFilters, align 4            ; [#uses=1 type=i32]
  %96 = load i32* %numModules, align 4            ; [#uses=1 type=i32]
  %mul138 = mul nsw i32 %95, %96                  ; [#uses=1 type=i32]
  %cmp139 = icmp eq i32 9216, %mul138             ; [#uses=1 type=i1]
  br i1 %cmp139, label %cond.true140, label %cond.false141

cond.true140:                                     ; preds = %if.else
  br label %cond.end142

cond.false141:                                    ; preds = %if.else
  call void @__assert_fail(i8* getelementptr inbounds ([32 x i8]* @.str15, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 126, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end142

cond.end142:                                      ; preds = %97, %cond.true140
  %98 = load i32* %numImages, align 4             ; [#uses=1 type=i32]
  %cmp143 = icmp eq i32 1, %98                    ; [#uses=1 type=i1]
  br i1 %cmp143, label %cond.true144, label %cond.false145

cond.true144:                                     ; preds = %cond.end142
  br label %cond.end146

cond.false145:                                    ; preds = %cond.end142
  call void @__assert_fail(i8* getelementptr inbounds ([15 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 127, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end146

cond.end146:                                      ; preds = %99, %cond.true144
  br label %if.end147

if.end147:                                        ; preds = %cond.end146, %if.then137
  %100 = load i32* %imgSizeY, align 4             ; [#uses=1 type=i32]
  %cmp148 = icmp eq i32 %100, 12                  ; [#uses=1 type=i1]
  br i1 %cmp148, label %land.lhs.true149, label %cond.false156

land.lhs.true149:                                 ; preds = %if.end147
  %101 = load i32* %imgSizeX, align 4             ; [#uses=1 type=i32]
  %cmp150 = icmp eq i32 %101, 12                  ; [#uses=1 type=i1]
  br i1 %cmp150, label %land.lhs.true151, label %cond.false156

land.lhs.true151:                                 ; preds = %land.lhs.true149
  %102 = load i32* %numModulesY, align 4          ; [#uses=1 type=i32]
  %cmp152 = icmp eq i32 %102, 12                  ; [#uses=1 type=i1]
  br i1 %cmp152, label %land.lhs.true153, label %cond.false156

land.lhs.true153:                                 ; preds = %land.lhs.true151
  %103 = load i32* %numModulesX, align 4          ; [#uses=1 type=i32]
  %cmp154 = icmp eq i32 %103, 12                  ; [#uses=1 type=i1]
  br i1 %cmp154, label %cond.true155, label %cond.false156

cond.true155:                                     ; preds = %land.lhs.true153
  br label %cond.end157

cond.false156:                                    ; preds = %land.lhs.true153, %land.lhs.true151, %land.lhs.true149, %if.end147
  call void @__assert_fail(i8* getelementptr inbounds ([75 x i8]* @.str17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 129, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end157

cond.end157:                                      ; preds = %104, %cond.true155
  %105 = load i32* %filterSize, align 4           ; [#uses=1 type=i32]
  %cmp158 = icmp eq i32 %105, 5                   ; [#uses=1 type=i1]
  br i1 %cmp158, label %land.lhs.true159, label %cond.false162

land.lhs.true159:                                 ; preds = %cond.end157
  %106 = load i32* %paddingStart, align 4         ; [#uses=1 type=i32]
  %cmp160 = icmp eq i32 %106, -2                  ; [#uses=1 type=i1]
  br i1 %cmp160, label %cond.true161, label %cond.false162

cond.true161:                                     ; preds = %land.lhs.true159
  br label %cond.end163

cond.false162:                                    ; preds = %land.lhs.true159, %cond.end157
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8]* @.str18, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 130, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end163

cond.end163:                                      ; preds = %107, %cond.true161
  %108 = load i32* %numFilters, align 4           ; [#uses=1 type=i32]
  %cmp164 = icmp eq i32 %108, 64                  ; [#uses=1 type=i1]
  br i1 %cmp164, label %cond.true165, label %cond.false166

cond.true165:                                     ; preds = %cond.end163
  br label %cond.end167

cond.false166:                                    ; preds = %cond.end163
  call void @__assert_fail(i8* getelementptr inbounds ([17 x i8]* @.str19, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 131, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end167

cond.end167:                                      ; preds = %109, %cond.true165
  %110 = load i32* %numImgColors, align 4         ; [#uses=1 type=i32]
  %cmp168 = icmp eq i32 %110, 64                  ; [#uses=1 type=i1]
  br i1 %cmp168, label %cond.true169, label %cond.false170

cond.true169:                                     ; preds = %cond.end167
  br label %cond.end171

cond.false170:                                    ; preds = %cond.end167
  call void @__assert_fail(i8* getelementptr inbounds ([19 x i8]* @.str20, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 132, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end171

cond.end171:                                      ; preds = %111, %cond.true169
  %112 = load i32* %numGroups, align 4            ; [#uses=1 type=i32]
  %cmp172 = icmp eq i32 %112, 1                   ; [#uses=1 type=i1]
  br i1 %cmp172, label %cond.true173, label %cond.false174

cond.true173:                                     ; preds = %cond.end171
  br label %cond.end175

cond.false174:                                    ; preds = %cond.end171
  call void @__assert_fail(i8* getelementptr inbounds ([15 x i8]* @.str21, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 133, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end175

cond.end175:                                      ; preds = %113, %cond.true173
  %114 = load float* %scaleTargets, align 4       ; [#uses=1 type=float]
  %conv176 = fpext float %114 to double           ; [#uses=1 type=double]
  %cmp177 = fcmp oeq double %conv176, 0.000000e+00 ; [#uses=1 type=i1]
  br i1 %cmp177, label %cond.true178, label %cond.false179

cond.true178:                                     ; preds = %cond.end175
  br label %cond.end180

cond.false179:                                    ; preds = %cond.end175
  call void @__assert_fail(i8* getelementptr inbounds ([20 x i8]* @.str22, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 134, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end180

cond.end180:                                      ; preds = %115, %cond.true178
  %116 = load float* %scaleOutput, align 4        ; [#uses=1 type=float]
  %conv181 = fpext float %116 to double           ; [#uses=1 type=double]
  %cmp182 = fcmp oeq double %conv181, 1.000000e+00 ; [#uses=1 type=i1]
  br i1 %cmp182, label %cond.true183, label %cond.false184

cond.true183:                                     ; preds = %cond.end180
  br label %cond.end185

cond.false184:                                    ; preds = %cond.end180
  call void @__assert_fail(i8* getelementptr inbounds ([19 x i8]* @.str23, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 135, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end185

cond.end185:                                      ; preds = %117, %cond.true183
  %118 = load i32* %numFiltersPerGroup, align 4   ; [#uses=1 type=i32]
  %cmp186 = icmp eq i32 %118, 64                  ; [#uses=1 type=i1]
  br i1 %cmp186, label %cond.true187, label %cond.false188

cond.true187:                                     ; preds = %cond.end185
  br label %cond.end189

cond.false188:                                    ; preds = %cond.end185
  call void @__assert_fail(i8* getelementptr inbounds ([25 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end189

cond.end189:                                      ; preds = %119, %cond.true187
  %120 = load i32* %imgsPerThread, align 4        ; [#uses=1 type=i32]
  %cmp190 = icmp eq i32 %120, 1                   ; [#uses=1 type=i1]
  br i1 %cmp190, label %land.lhs.true191, label %cond.false196

land.lhs.true191:                                 ; preds = %cond.end189
  %121 = load i8* %checkImgBounds, align 1        ; [#uses=1 type=i8]
  %tobool192 = trunc i8 %121 to i1                ; [#uses=1 type=i1]
  %conv193 = zext i1 %tobool192 to i32            ; [#uses=1 type=i32]
  %cmp194 = icmp eq i32 %conv193, 1               ; [#uses=1 type=i1]
  br i1 %cmp194, label %cond.true195, label %cond.false196

cond.true195:                                     ; preds = %land.lhs.true191
  br label %cond.end197

cond.false196:                                    ; preds = %land.lhs.true191, %cond.end189
  call void @__assert_fail(i8* getelementptr inbounds ([45 x i8]* @.str25, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([11 x i8]* @__PRETTY_FUNCTION__.main, i32 0, i32 0)) #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end197

cond.end197:                                      ; preds = %122, %cond.true195
  %123 = load i32* %numImages, align 4            ; [#uses=1 type=i32]
  %cmp198 = icmp eq i32 %123, 1                   ; [#uses=1 type=i1]
  br i1 %cmp198, label %land.lhs.true199, label %if.then201

land.lhs.true199:                                 ; preds = %cond.end197
  %124 = load i32* %imgStride, align 4            ; [#uses=1 type=i32]
  %cmp200 = icmp eq i32 %124, 1                   ; [#uses=1 type=i1]
  br i1 %cmp200, label %if.end206, label %if.then201

if.then201:                                       ; preds = %land.lhs.true199, %cond.end197
  br label %do.body202

do.body202:                                       ; preds = %if.then201
  %call203 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8]* @.str26, i32 0, i32 0)) ; [#uses=0 type=i32]
  %125 = load %struct._IO_FILE** @stdout, align 8 ; [#uses=1 type=%struct._IO_FILE*]
  %call204 = call i32 @fflush(%struct._IO_FILE* %125) ; [#uses=0 type=i32]
  call void @exit(i32 1) #9
  unreachable

do.end205:                                        ; No predecessors!
  br label %if.end206

if.end206:                                        ; preds = %do.end205, %land.lhs.true199
  call void @_ZN4dim3C1Ejjj(%struct.dim3* %blocks, i32 64, i32 1, i32 1)
  call void @_ZN4dim3C1Ejjj(%struct.dim3* %threads, i32 144, i32 1, i32 1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end206
  %126 = load i32* %i, align 4                    ; [#uses=1 type=i32]
  %cmp207 = icmp slt i32 %126, 1000               ; [#uses=1 type=i1]
  br i1 %cmp207, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call208 = call i32 @_ZN63_GLOBAL__N__43_tmpxft_000019dc_00000000_6_convOpti_cpp1_ii_main22cudaFuncSetCacheConfigIFvPfS1_S1_iiiiiiiiiiiffbEEE9cudaErrorPT_13cudaFuncCache(void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)* @_Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffb, i32 1) ; [#uses=0 type=i32]
  %127 = bitcast %struct.dim3* %agg.tmp to i8*    ; [#uses=1 type=i8*]
  %128 = bitcast %struct.dim3* %blocks to i8*     ; [#uses=1 type=i8*]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %127, i8* %128, i64 12, i32 4, i1 false)
  %129 = bitcast %struct.dim3* %agg.tmp209 to i8* ; [#uses=1 type=i8*]
  %130 = bitcast %struct.dim3* %threads to i8*    ; [#uses=1 type=i8*]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %129, i8* %130, i64 12, i32 4, i1 false)
  %131 = bitcast { i64, i32 }* %agg.tmp.coerce to i8* ; [#uses=1 type=i8*]
  %132 = bitcast %struct.dim3* %agg.tmp to i8*    ; [#uses=1 type=i8*]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %131, i8* %132, i64 12, i32 0, i1 false)
  %133 = getelementptr { i64, i32 }* %agg.tmp.coerce, i32 0, i32 0 ; [#uses=1 type=i64*]
  %134 = load i64* %133, align 1                  ; [#uses=1 type=i64]
  %135 = getelementptr { i64, i32 }* %agg.tmp.coerce, i32 0, i32 1 ; [#uses=1 type=i32*]
  %136 = load i32* %135, align 1                  ; [#uses=1 type=i32]
  %137 = bitcast { i64, i32 }* %agg.tmp209.coerce to i8* ; [#uses=1 type=i8*]
  %138 = bitcast %struct.dim3* %agg.tmp209 to i8* ; [#uses=1 type=i8*]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %137, i8* %138, i64 12, i32 0, i1 false)
  %139 = getelementptr { i64, i32 }* %agg.tmp209.coerce, i32 0, i32 0 ; [#uses=1 type=i64*]
  %140 = load i64* %139, align 1                  ; [#uses=1 type=i64]
  %141 = getelementptr { i64, i32 }* %agg.tmp209.coerce, i32 0, i32 1 ; [#uses=1 type=i32*]
  %142 = load i32* %141, align 1                  ; [#uses=1 type=i32]
  %call210 = call i32 @cudaConfigureCall(i64 %134, i32 %136, i64 %140, i32 %142, i64 0, %struct.CUstream_st* null) ; [#uses=1 type=i32]
  %tobool211 = icmp ne i32 %call210, 0            ; [#uses=1 type=i1]
  br i1 %tobool211, label %cond.true212, label %cond.false213

cond.true212:                                     ; preds = %for.body
  br label %cond.end215

cond.false213:                                    ; preds = %for.body
  %143 = load float** %images_d, align 8          ; [#uses=1 type=float*]
  %144 = load float** %filters_d, align 8         ; [#uses=1 type=float*]
  %145 = load float** %targets_d, align 8         ; [#uses=1 type=float*]
  %146 = load i32* %numImages, align 4            ; [#uses=1 type=i32]
  %147 = load i32* %numFilters, align 4           ; [#uses=1 type=i32]
  %148 = load i32* %imgSizeY, align 4             ; [#uses=1 type=i32]
  %149 = load i32* %imgSizeX, align 4             ; [#uses=1 type=i32]
  %150 = load i32* %filterSize, align 4           ; [#uses=1 type=i32]
  %151 = load i32* %paddingStart, align 4         ; [#uses=1 type=i32]
  %152 = load i32* %moduleStride, align 4         ; [#uses=1 type=i32]
  %153 = load i32* %numModulesY, align 4          ; [#uses=1 type=i32]
  %154 = load i32* %numModulesX, align 4          ; [#uses=1 type=i32]
  %155 = load i32* %imgStride, align 4            ; [#uses=1 type=i32]
  %156 = load i32* %numImgColors, align 4         ; [#uses=1 type=i32]
  %157 = load float* %scaleTargets, align 4       ; [#uses=1 type=float]
  %158 = load float* %scaleOutput, align 4        ; [#uses=1 type=float]
  %159 = load i8* %conv, align 1                  ; [#uses=1 type=i8]
  %tobool214 = trunc i8 %159 to i1                ; [#uses=1 type=i1]
  call void @_Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffb(float* %143, float* %144, float* %145, i32 %146, i32 %147, i32 %148, i32 %149, i32 %150, i32 %151, i32 %152, i32 %153, i32 %154, i32 %155, i32 %156, float %157, float %158, i1 zeroext %tobool214)
  br label %cond.end215

cond.end215:                                      ; preds = %cond.false213, %cond.true212
  br label %for.inc

for.inc:                                          ; preds = %cond.end215
  %160 = load i32* %i, align 4                    ; [#uses=1 type=i32]
  %inc = add nsw i32 %160, 1                      ; [#uses=1 type=i32]
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %161 = load float** %targets_h, align 8         ; [#uses=1 type=float*]
  %162 = bitcast float* %161 to i8*               ; [#uses=1 type=i8*]
  %163 = load float** %targets_d, align 8         ; [#uses=1 type=float*]
  %164 = bitcast float* %163 to i8*               ; [#uses=1 type=i8*]
  %call216 = call i32 @cudaMemcpy(i8* %162, i8* %164, i64 36864, i32 2) ; [#uses=1 type=i32]
  store i32 %call216, i32* %err, align 4
  %165 = load i32* %err, align 4                  ; [#uses=1 type=i32]
  %cmp217 = icmp ne i32 %165, 0                   ; [#uses=1 type=i1]
  br i1 %cmp217, label %if.then218, label %if.end223

if.then218:                                       ; preds = %for.end
  br label %do.body219

do.body219:                                       ; preds = %if.then218
  %call220 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str1, i32 0, i32 0)) ; [#uses=0 type=i32]
  %166 = load %struct._IO_FILE** @stdout, align 8 ; [#uses=1 type=%struct._IO_FILE*]
  %call221 = call i32 @fflush(%struct._IO_FILE* %166) ; [#uses=0 type=i32]
  call void @exit(i32 1) #9
  unreachable

do.end222:                                        ; No predecessors!
  br label %if.end223

if.end223:                                        ; preds = %do.end222, %for.end
  %167 = load float** %targets_h, align 8         ; [#uses=1 type=float*]
  call void @_Z12print_resultPfiiiii(float* %167, i32 9216, i32 1, i32 9216, i32 1, i32 1)
  ret i32 0
}

; [#uses=7]
; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; [#uses=3]
; Function Attrs: uwtable
define float* @_Z10readMatrixPcii(i8* %filename, i32 %nRows, i32 %nCols) #0 {
entry:
  %filename.addr = alloca i8*, align 8            ; [#uses=3 type=i8**]
  %nRows.addr = alloca i32, align 4               ; [#uses=3 type=i32*]
  %nCols.addr = alloca i32, align 4               ; [#uses=4 type=i32*]
  %tmp = alloca float, align 4                    ; [#uses=2 type=float*]
  %fp = alloca %struct._IO_FILE*, align 8         ; [#uses=2 type=%struct._IO_FILE**]
  %full = alloca float*, align 8                  ; [#uses=3 type=float**]
  %i = alloca i32, align 4                        ; [#uses=5 type=i32*]
  %j = alloca i32, align 4                        ; [#uses=5 type=i32*]
  %ret = alloca i32, align 4                      ; [#uses=3 type=i32*]
  store i8* %filename, i8** %filename.addr, align 8
  store i32 %nRows, i32* %nRows.addr, align 4
  store i32 %nCols, i32* %nCols.addr, align 4
  %0 = load i32* %nRows.addr, align 4             ; [#uses=1 type=i32]
  %1 = load i32* %nCols.addr, align 4             ; [#uses=1 type=i32]
  %mul = mul nsw i32 %0, %1                       ; [#uses=1 type=i32]
  %conv = sext i32 %mul to i64                    ; [#uses=1 type=i64]
  %mul3 = mul i64 %conv, 4                        ; [#uses=1 type=i64]
  %call = call noalias i8* @malloc(i64 %mul3) #1  ; [#uses=1 type=i8*]
  %2 = bitcast i8* %call to float*                ; [#uses=1 type=float*]
  store float* %2, float** %full, align 8
  %3 = load i8** %filename.addr, align 8          ; [#uses=1 type=i8*]
  %call4 = call %struct._IO_FILE* @fopen(i8* %3, i8* getelementptr inbounds ([3 x i8]* @.str27, i32 0, i32 0)) ; [#uses=2 type=%struct._IO_FILE*]
  store %struct._IO_FILE* %call4, %struct._IO_FILE** %fp, align 8
  %cmp = icmp eq %struct._IO_FILE* %call4, null   ; [#uses=1 type=i1]
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i8** %filename.addr, align 8          ; [#uses=1 type=i8*]
  %call5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str28, i32 0, i32 0), i8* %4) ; [#uses=0 type=i32]
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc26, %if.end
  %5 = load i32* %i, align 4                      ; [#uses=1 type=i32]
  %6 = load i32* %nRows.addr, align 4             ; [#uses=1 type=i32]
  %cmp7 = icmp slt i32 %5, %6                     ; [#uses=1 type=i1]
  br i1 %cmp7, label %for.body, label %for.end28

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body
  %7 = load i32* %j, align 4                      ; [#uses=1 type=i32]
  %8 = load i32* %nCols.addr, align 4             ; [#uses=1 type=i32]
  %cmp10 = icmp slt i32 %7, %8                    ; [#uses=1 type=i1]
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond9
  %9 = load %struct._IO_FILE** %fp, align 8       ; [#uses=1 type=%struct._IO_FILE*]
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...)* @fscanf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([4 x i8]* @.str29, i32 0, i32 0), float* %tmp) ; [#uses=1 type=i32]
  store i32 %call13, i32* %ret, align 4
  %10 = load i32* %ret, align 4                   ; [#uses=1 type=i32]
  %cmp14 = icmp eq i32 %10, 1                     ; [#uses=1 type=i1]
  br i1 %cmp14, label %if.then15, label %if.else

if.then15:                                        ; preds = %for.body11
  %11 = load float* %tmp, align 4                 ; [#uses=1 type=float]
  %12 = load i32* %i, align 4                     ; [#uses=1 type=i32]
  %13 = load i32* %nCols.addr, align 4            ; [#uses=1 type=i32]
  %mul16 = mul nsw i32 %12, %13                   ; [#uses=1 type=i32]
  %14 = load i32* %j, align 4                     ; [#uses=1 type=i32]
  %add = add nsw i32 %mul16, %14                  ; [#uses=1 type=i32]
  %idxprom = sext i32 %add to i64                 ; [#uses=1 type=i64]
  %15 = load float** %full, align 8               ; [#uses=1 type=float*]
  %arrayidx = getelementptr inbounds float* %15, i64 %idxprom ; [#uses=1 type=float*]
  store float %11, float* %arrayidx, align 4
  br label %if.end25

if.else:                                          ; preds = %for.body11
  %call17 = call i32* @__errno_location() #10     ; [#uses=1 type=i32*]
  %16 = load i32* %call17, align 4                ; [#uses=1 type=i32]
  %cmp18 = icmp ne i32 %16, 0                     ; [#uses=1 type=i1]
  br i1 %cmp18, label %if.then19, label %if.else20

if.then19:                                        ; preds = %if.else
  call void @perror(i8* getelementptr inbounds ([7 x i8]* @.str30, i32 0, i32 0))
  br label %for.end

if.else20:                                        ; preds = %if.else
  %17 = load i32* %ret, align 4                   ; [#uses=1 type=i32]
  %cmp21 = icmp eq i32 %17, -1                    ; [#uses=1 type=i1]
  br i1 %cmp21, label %if.then22, label %if.else23

if.then22:                                        ; preds = %if.else20
  br label %for.end

if.else23:                                        ; preds = %if.else20
  %call24 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str31, i32 0, i32 0)) ; [#uses=0 type=i32]
  call void @exit(i32 0) #9
  unreachable

if.end25:                                         ; preds = %if.then15
  br label %for.inc

for.inc:                                          ; preds = %if.end25
  %18 = load i32* %j, align 4                     ; [#uses=1 type=i32]
  %inc = add nsw i32 %18, 1                       ; [#uses=1 type=i32]
  store i32 %inc, i32* %j, align 4
  br label %for.cond9

for.end:                                          ; preds = %if.then22, %if.then19, %for.cond9
  br label %for.inc26

for.inc26:                                        ; preds = %for.end
  %19 = load i32* %i, align 4                     ; [#uses=1 type=i32]
  %inc27 = add nsw i32 %19, 1                     ; [#uses=1 type=i32]
  store i32 %inc27, i32* %i, align 4
  br label %for.cond

for.end28:                                        ; preds = %for.cond
  %20 = load float** %full, align 8               ; [#uses=1 type=float*]
  ret float* %20
}

; [#uses=3]
declare i32 @cudaMalloc(i8**, i64) #2

; [#uses=12]
declare i32 @printf(i8*, ...) #2

; [#uses=8]
declare i32 @fflush(%struct._IO_FILE*) #2

; [#uses=10]
; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; [#uses=4]
declare i32 @cudaMemcpy(i8*, i8*, i64, i32) #2

; [#uses=23]
; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #3

; [#uses=1]
; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr double @_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 %__x) #4 {
entry:
  %__x.addr = alloca i32, align 4                 ; [#uses=2 type=i32*]
  store i32 %__x, i32* %__x.addr, align 4
  %0 = load i32* %__x.addr, align 4               ; [#uses=1 type=i32]
  %conv = sitofp i32 %0 to double                 ; [#uses=1 type=double]
  %call = call double @sqrt(double %conv) #10     ; [#uses=1 type=double]
  ret double %call
}

; [#uses=2]
; Function Attrs: uwtable
define linkonce_odr void @_ZN4dim3C1Ejjj(%struct.dim3* %this, i32 %vx, i32 %vy, i32 %vz) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %struct.dim3*, align 8      ; [#uses=2 type=%struct.dim3**]
  %vx.addr = alloca i32, align 4                  ; [#uses=2 type=i32*]
  %vy.addr = alloca i32, align 4                  ; [#uses=2 type=i32*]
  %vz.addr = alloca i32, align 4                  ; [#uses=2 type=i32*]
  store %struct.dim3* %this, %struct.dim3** %this.addr, align 8
  store i32 %vx, i32* %vx.addr, align 4
  store i32 %vy, i32* %vy.addr, align 4
  store i32 %vz, i32* %vz.addr, align 4
  %this1 = load %struct.dim3** %this.addr         ; [#uses=1 type=%struct.dim3*]
  %0 = load i32* %vx.addr, align 4                ; [#uses=1 type=i32]
  %1 = load i32* %vy.addr, align 4                ; [#uses=1 type=i32]
  %2 = load i32* %vz.addr, align 4                ; [#uses=1 type=i32]
  call void @_ZN4dim3C2Ejjj(%struct.dim3* %this1, i32 %0, i32 %1, i32 %2)
  ret void
}

; [#uses=1]
; Function Attrs: inlinehint uwtable
define linkonce_odr i32 @_ZN63_GLOBAL__N__43_tmpxft_000019dc_00000000_6_convOpti_cpp1_ii_main22cudaFuncSetCacheConfigIFvPfS1_S1_iiiiiiiiiiiffbEEE9cudaErrorPT_13cudaFuncCache(void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)* %func, i32 %cacheConfig) #5 {
entry:
  %func.addr = alloca void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)*, align 8 ; [#uses=2 type=void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)**]
  %cacheConfig.addr = alloca i32, align 4         ; [#uses=2 type=i32*]
  store void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)* %func, void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)** %func.addr, align 8
  store i32 %cacheConfig, i32* %cacheConfig.addr, align 4
  %0 = load void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)** %func.addr, align 8 ; [#uses=1 type=void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)*]
  %1 = bitcast void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)* %0 to i8* ; [#uses=1 type=i8*]
  %2 = load i32* %cacheConfig.addr, align 4       ; [#uses=1 type=i32]
  %call = call i32 @cudaFuncSetCacheConfig(i8* %1, i32 %2) ; [#uses=1 type=i32]
  ret i32 %call
}

; [#uses=3]
; Function Attrs: uwtable
define linkonce_odr void @_Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffb(float* %images, float* %filters, float* %targets, i32 %numImages, i32 %numFilters, i32 %imgSizeY, i32 %imgSizeX, i32 %filterSize, i32 %paddingStart, i32 %moduleStride, i32 %numModulesY, i32 %numModulesX, i32 %imgStride, i32 %numImgColors, float %scaleTargets, float %scaleOutputs, i1 zeroext %conv) #0 {
entry:
  %images.addr = alloca float*, align 8           ; [#uses=2 type=float**]
  %filters.addr = alloca float*, align 8          ; [#uses=2 type=float**]
  %targets.addr = alloca float*, align 8          ; [#uses=2 type=float**]
  %numImages.addr = alloca i32, align 4           ; [#uses=2 type=i32*]
  %numFilters.addr = alloca i32, align 4          ; [#uses=2 type=i32*]
  %imgSizeY.addr = alloca i32, align 4            ; [#uses=2 type=i32*]
  %imgSizeX.addr = alloca i32, align 4            ; [#uses=2 type=i32*]
  %filterSize.addr = alloca i32, align 4          ; [#uses=2 type=i32*]
  %paddingStart.addr = alloca i32, align 4        ; [#uses=2 type=i32*]
  %moduleStride.addr = alloca i32, align 4        ; [#uses=2 type=i32*]
  %numModulesY.addr = alloca i32, align 4         ; [#uses=2 type=i32*]
  %numModulesX.addr = alloca i32, align 4         ; [#uses=2 type=i32*]
  %imgStride.addr = alloca i32, align 4           ; [#uses=2 type=i32*]
  %numImgColors.addr = alloca i32, align 4        ; [#uses=2 type=i32*]
  %scaleTargets.addr = alloca float, align 4      ; [#uses=2 type=float*]
  %scaleOutputs.addr = alloca float, align 4      ; [#uses=2 type=float*]
  %conv.addr = alloca i8, align 1                 ; [#uses=2 type=i8*]
  store float* %images, float** %images.addr, align 8
  store float* %filters, float** %filters.addr, align 8
  store float* %targets, float** %targets.addr, align 8
  store i32 %numImages, i32* %numImages.addr, align 4
  store i32 %numFilters, i32* %numFilters.addr, align 4
  store i32 %imgSizeY, i32* %imgSizeY.addr, align 4
  store i32 %imgSizeX, i32* %imgSizeX.addr, align 4
  store i32 %filterSize, i32* %filterSize.addr, align 4
  store i32 %paddingStart, i32* %paddingStart.addr, align 4
  store i32 %moduleStride, i32* %moduleStride.addr, align 4
  store i32 %numModulesY, i32* %numModulesY.addr, align 4
  store i32 %numModulesX, i32* %numModulesX.addr, align 4
  store i32 %imgStride, i32* %imgStride.addr, align 4
  store i32 %numImgColors, i32* %numImgColors.addr, align 4
  store float %scaleTargets, float* %scaleTargets.addr, align 4
  store float %scaleOutputs, float* %scaleOutputs.addr, align 4
  %frombool = zext i1 %conv to i8                 ; [#uses=1 type=i8]
  store i8 %frombool, i8* %conv.addr, align 1
  call void @_ZL37__wrapper__device_stub_optiConvFilterILi1EEvRPfS1_S1_RKiS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKfS5_RKb(float** %images.addr, float** %filters.addr, float** %targets.addr, i32* %numImages.addr, i32* %numFilters.addr, i32* %imgSizeY.addr, i32* %imgSizeX.addr, i32* %filterSize.addr, i32* %paddingStart.addr, i32* %moduleStride.addr, i32* %numModulesY.addr, i32* %numModulesX.addr, i32* %imgStride.addr, i32* %numImgColors.addr, float* %scaleTargets.addr, float* %scaleOutputs.addr, i8* %conv.addr)
  ret void
}

; [#uses=1]
declare i32 @cudaConfigureCall(i64, i32, i64, i32, i64, %struct.CUstream_st*) #2

; [#uses=1]
; Function Attrs: uwtable
define void @_Z12print_resultPfiiiii(float* %result, i32 %mR, i32 %nR, i32 %real_mR, i32 %real_nR, i32 %isRowMajor) #0 {
entry:
  %result.addr = alloca float*, align 8           ; [#uses=2 type=float**]
  %mR.addr = alloca i32, align 4                  ; [#uses=2 type=i32*]
  %nR.addr = alloca i32, align 4                  ; [#uses=3 type=i32*]
  %real_mR.addr = alloca i32, align 4             ; [#uses=2 type=i32*]
  %real_nR.addr = alloca i32, align 4             ; [#uses=2 type=i32*]
  %isRowMajor.addr = alloca i32, align 4          ; [#uses=1 type=i32*]
  %y = alloca i32, align 4                        ; [#uses=6 type=i32*]
  %x = alloca i32, align 4                        ; [#uses=6 type=i32*]
  store float* %result, float** %result.addr, align 8
  store i32 %mR, i32* %mR.addr, align 4
  store i32 %nR, i32* %nR.addr, align 4
  store i32 %real_mR, i32* %real_mR.addr, align 4
  store i32 %real_nR, i32* %real_nR.addr, align 4
  store i32 %isRowMajor, i32* %isRowMajor.addr, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32* %y, align 4                      ; [#uses=1 type=i32]
  %1 = load i32* %mR.addr, align 4                ; [#uses=1 type=i32]
  %cmp = icmp slt i32 %0, %1                      ; [#uses=1 type=i1]
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %x, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32* %x, align 4                      ; [#uses=1 type=i32]
  %3 = load i32* %nR.addr, align 4                ; [#uses=1 type=i32]
  %cmp2 = icmp slt i32 %2, %3                     ; [#uses=1 type=i1]
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32* %x, align 4                      ; [#uses=1 type=i32]
  %5 = load i32* %real_nR.addr, align 4           ; [#uses=1 type=i32]
  %cmp4 = icmp slt i32 %4, %5                     ; [#uses=1 type=i1]
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body3
  %6 = load i32* %y, align 4                      ; [#uses=1 type=i32]
  %7 = load i32* %real_mR.addr, align 4           ; [#uses=1 type=i32]
  %cmp5 = icmp slt i32 %6, %7                     ; [#uses=1 type=i1]
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load i32* %nR.addr, align 4                ; [#uses=1 type=i32]
  %9 = load i32* %y, align 4                      ; [#uses=1 type=i32]
  %mul = mul nsw i32 %8, %9                       ; [#uses=1 type=i32]
  %10 = load i32* %x, align 4                     ; [#uses=1 type=i32]
  %add = add nsw i32 %mul, %10                    ; [#uses=1 type=i32]
  %idxprom = sext i32 %add to i64                 ; [#uses=1 type=i64]
  %11 = load float** %result.addr, align 8        ; [#uses=1 type=float*]
  %arrayidx = getelementptr inbounds float* %11, i64 %idxprom ; [#uses=1 type=float*]
  %12 = load float* %arrayidx, align 4            ; [#uses=1 type=float]
  %conv = fpext float %12 to double               ; [#uses=1 type=double]
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str32, i32 0, i32 0), double %conv) ; [#uses=0 type=i32]
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i32* %x, align 4                     ; [#uses=1 type=i32]
  %inc = add nsw i32 %13, 1                       ; [#uses=1 type=i32]
  store i32 %inc, i32* %x, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str33, i32 0, i32 0)) ; [#uses=0 type=i32]
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32* %y, align 4                     ; [#uses=1 type=i32]
  %inc8 = add nsw i32 %14, 1                      ; [#uses=1 type=i32]
  store i32 %inc8, i32* %y, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  ret void
}

; [#uses=1]
; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #6

; [#uses=1]
declare %struct._IO_FILE* @fopen(i8*, i8*) #2

; [#uses=1]
declare i32 @fscanf(%struct._IO_FILE*, i8*, ...) #2

; [#uses=1]
; Function Attrs: nounwind readnone
declare i32* @__errno_location() #7

; [#uses=1]
declare void @perror(i8*) #2

; [#uses=1]
; Function Attrs: uwtable
define internal void @_ZL76__sti____cudaRegisterAll_43_tmpxft_000019dc_00000000_6_convOpti_cpp1_ii_mainv() #0 {
entry:
  %callback_fp = alloca void (i8**)*, align 8     ; [#uses=2 type=void (i8**)**]
  %call = call i8** @__cudaRegisterFatBinary(i8* bitcast (%struct.__fatBinC_Wrapper_t* @_Z15__fatDeviceText to i8*)) ; [#uses=1 type=i8**]
  store i8** %call, i8*** @_ZL20__cudaFatCubinHandle, align 8
  store void (i8**)* @_ZL31__nv_cudaEntityRegisterCallbackPPv, void (i8**)** %callback_fp, align 8
  %0 = load void (i8**)** %callback_fp, align 8   ; [#uses=1 type=void (i8**)*]
  %1 = load i8*** @_ZL20__cudaFatCubinHandle, align 8 ; [#uses=1 type=i8**]
  call void %0(i8** %1)
  %call1 = call i32 @atexit(void ()* @_ZL26__cudaUnregisterBinaryUtilv) #1 ; [#uses=0 type=i32]
  ret void
}

; [#uses=1]
declare i8** @__cudaRegisterFatBinary(i8*) #2

; [#uses=1]
; Function Attrs: uwtable
define internal void @_ZL31__nv_cudaEntityRegisterCallbackPPv(i8** %__T22) #0 {
entry:
  %__T22.addr = alloca i8**, align 8              ; [#uses=4 type=i8***]
  store i8** %__T22, i8*** %__T22.addr, align 8
  %0 = load i8*** %__T22.addr, align 8            ; [#uses=1 type=i8**]
  store i8** %0, i8*** @_ZZL31__nv_cudaEntityRegisterCallbackPPvE5__ref, align 8
  %1 = load i8*** %__T22.addr, align 8            ; [#uses=1 type=i8**]
  call void @_ZL37__nv_save_fatbinhandle_for_managed_rtPPv(i8** %1)
  %2 = load i8*** %__T22.addr, align 8            ; [#uses=1 type=i8**]
  call void @__cudaRegisterFunction(i8** %2, i8* bitcast (void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)* @_Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffb to i8*), i8* getelementptr inbounds ([48 x i8]* @.str34, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8]* @.str34, i32 0, i32 0), i32 -1, %struct.uint3* null, %struct.uint3* null, %struct.dim3* null, %struct.dim3* null, i32* null)
  ret void
}

; [#uses=1]
; Function Attrs: nounwind
declare i32 @atexit(void ()*) #6

; [#uses=1]
; Function Attrs: uwtable
define internal void @_ZL26__cudaUnregisterBinaryUtilv() #0 {
entry:
  call void @_ZL22____nv_dummy_param_refPv(i8* bitcast (i8*** @_ZL20__cudaFatCubinHandle to i8*))
  %0 = load i8*** @_ZL20__cudaFatCubinHandle, align 8 ; [#uses=1 type=i8**]
  call void @__cudaUnregisterFatBinary(i8** %0)
  ret void
}

; [#uses=1]
; Function Attrs: uwtable
define internal void @_ZL37__wrapper__device_stub_optiConvFilterILi1EEvRPfS1_S1_RKiS3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKfS5_RKb(float** %__cuda_0, float** %__cuda_1, float** %__cuda_2, i32* %__cuda_3, i32* %__cuda_4, i32* %__cuda_5, i32* %__cuda_6, i32* %__cuda_7, i32* %__cuda_8, i32* %__cuda_9, i32* %__cuda_10, i32* %__cuda_11, i32* %__cuda_12, i32* %__cuda_13, float* %__cuda_14, float* %__cuda_15, i8* %__cuda_16) #0 {
entry:
  %__cuda_0.addr = alloca float**, align 8        ; [#uses=2 type=float***]
  %__cuda_1.addr = alloca float**, align 8        ; [#uses=2 type=float***]
  %__cuda_2.addr = alloca float**, align 8        ; [#uses=2 type=float***]
  %__cuda_3.addr = alloca i32*, align 8           ; [#uses=2 type=i32**]
  %__cuda_4.addr = alloca i32*, align 8           ; [#uses=2 type=i32**]
  %__cuda_5.addr = alloca i32*, align 8           ; [#uses=2 type=i32**]
  %__cuda_6.addr = alloca i32*, align 8           ; [#uses=2 type=i32**]
  %__cuda_7.addr = alloca i32*, align 8           ; [#uses=2 type=i32**]
  %__cuda_8.addr = alloca i32*, align 8           ; [#uses=2 type=i32**]
  %__cuda_9.addr = alloca i32*, align 8           ; [#uses=2 type=i32**]
  %__cuda_10.addr = alloca i32*, align 8          ; [#uses=2 type=i32**]
  %__cuda_11.addr = alloca i32*, align 8          ; [#uses=2 type=i32**]
  %__cuda_12.addr = alloca i32*, align 8          ; [#uses=2 type=i32**]
  %__cuda_13.addr = alloca i32*, align 8          ; [#uses=2 type=i32**]
  %__cuda_14.addr = alloca float*, align 8        ; [#uses=2 type=float**]
  %__cuda_15.addr = alloca float*, align 8        ; [#uses=2 type=float**]
  %__cuda_16.addr = alloca i8*, align 8           ; [#uses=2 type=i8**]
  store float** %__cuda_0, float*** %__cuda_0.addr, align 8
  store float** %__cuda_1, float*** %__cuda_1.addr, align 8
  store float** %__cuda_2, float*** %__cuda_2.addr, align 8
  store i32* %__cuda_3, i32** %__cuda_3.addr, align 8
  store i32* %__cuda_4, i32** %__cuda_4.addr, align 8
  store i32* %__cuda_5, i32** %__cuda_5.addr, align 8
  store i32* %__cuda_6, i32** %__cuda_6.addr, align 8
  store i32* %__cuda_7, i32** %__cuda_7.addr, align 8
  store i32* %__cuda_8, i32** %__cuda_8.addr, align 8
  store i32* %__cuda_9, i32** %__cuda_9.addr, align 8
  store i32* %__cuda_10, i32** %__cuda_10.addr, align 8
  store i32* %__cuda_11, i32** %__cuda_11.addr, align 8
  store i32* %__cuda_12, i32** %__cuda_12.addr, align 8
  store i32* %__cuda_13, i32** %__cuda_13.addr, align 8
  store float* %__cuda_14, float** %__cuda_14.addr, align 8
  store float* %__cuda_15, float** %__cuda_15.addr, align 8
  store i8* %__cuda_16, i8** %__cuda_16.addr, align 8
  %0 = load float*** %__cuda_0.addr, align 8      ; [#uses=1 type=float**]
  %1 = load float** %0, align 8                   ; [#uses=1 type=float*]
  %2 = load float*** %__cuda_1.addr, align 8      ; [#uses=1 type=float**]
  %3 = load float** %2, align 8                   ; [#uses=1 type=float*]
  %4 = load float*** %__cuda_2.addr, align 8      ; [#uses=1 type=float**]
  %5 = load float** %4, align 8                   ; [#uses=1 type=float*]
  %6 = load i32** %__cuda_3.addr, align 8         ; [#uses=1 type=i32*]
  %7 = load i32* %6, align 4                      ; [#uses=1 type=i32]
  %8 = load i32** %__cuda_4.addr, align 8         ; [#uses=1 type=i32*]
  %9 = load i32* %8, align 4                      ; [#uses=1 type=i32]
  %10 = load i32** %__cuda_5.addr, align 8        ; [#uses=1 type=i32*]
  %11 = load i32* %10, align 4                    ; [#uses=1 type=i32]
  %12 = load i32** %__cuda_6.addr, align 8        ; [#uses=1 type=i32*]
  %13 = load i32* %12, align 4                    ; [#uses=1 type=i32]
  %14 = load i32** %__cuda_7.addr, align 8        ; [#uses=1 type=i32*]
  %15 = load i32* %14, align 4                    ; [#uses=1 type=i32]
  %16 = load i32** %__cuda_8.addr, align 8        ; [#uses=1 type=i32*]
  %17 = load i32* %16, align 4                    ; [#uses=1 type=i32]
  %18 = load i32** %__cuda_9.addr, align 8        ; [#uses=1 type=i32*]
  %19 = load i32* %18, align 4                    ; [#uses=1 type=i32]
  %20 = load i32** %__cuda_10.addr, align 8       ; [#uses=1 type=i32*]
  %21 = load i32* %20, align 4                    ; [#uses=1 type=i32]
  %22 = load i32** %__cuda_11.addr, align 8       ; [#uses=1 type=i32*]
  %23 = load i32* %22, align 4                    ; [#uses=1 type=i32]
  %24 = load i32** %__cuda_12.addr, align 8       ; [#uses=1 type=i32*]
  %25 = load i32* %24, align 4                    ; [#uses=1 type=i32]
  %26 = load i32** %__cuda_13.addr, align 8       ; [#uses=1 type=i32*]
  %27 = load i32* %26, align 4                    ; [#uses=1 type=i32]
  %28 = load float** %__cuda_14.addr, align 8     ; [#uses=1 type=float*]
  %29 = load float* %28, align 4                  ; [#uses=1 type=float]
  %30 = load float** %__cuda_15.addr, align 8     ; [#uses=1 type=float*]
  %31 = load float* %30, align 4                  ; [#uses=1 type=float]
  %32 = load i8** %__cuda_16.addr, align 8        ; [#uses=1 type=i8*]
  %33 = load i8* %32, align 1                     ; [#uses=1 type=i8]
  %tobool = trunc i8 %33 to i1                    ; [#uses=1 type=i1]
  call void @_ZL61__device_stub__Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffbPfS_S_iiiiiiiiiiiffb(float* %1, float* %3, float* %5, i32 %7, i32 %9, i32 %11, i32 %13, i32 %15, i32 %17, i32 %19, i32 %21, i32 %23, i32 %25, i32 %27, float %29, float %31, i1 zeroext %tobool)
  ret void
}

; [#uses=1]
; Function Attrs: uwtable
define internal void @_ZL61__device_stub__Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffbPfS_S_iiiiiiiiiiiffb(float* %__par0, float* %__par1, float* %__par2, i32 %__par3, i32 %__par4, i32 %__par5, i32 %__par6, i32 %__par7, i32 %__par8, i32 %__par9, i32 %__par10, i32 %__par11, i32 %__par12, i32 %__par13, float %__par14, float %__par15, i1 zeroext %__par16) #0 {
entry:
  %__par0.addr = alloca float*, align 8           ; [#uses=2 type=float**]
  %__par1.addr = alloca float*, align 8           ; [#uses=2 type=float**]
  %__par2.addr = alloca float*, align 8           ; [#uses=2 type=float**]
  %__par3.addr = alloca i32, align 4              ; [#uses=2 type=i32*]
  %__par4.addr = alloca i32, align 4              ; [#uses=2 type=i32*]
  %__par5.addr = alloca i32, align 4              ; [#uses=2 type=i32*]
  %__par6.addr = alloca i32, align 4              ; [#uses=2 type=i32*]
  %__par7.addr = alloca i32, align 4              ; [#uses=2 type=i32*]
  %__par8.addr = alloca i32, align 4              ; [#uses=2 type=i32*]
  %__par9.addr = alloca i32, align 4              ; [#uses=2 type=i32*]
  %__par10.addr = alloca i32, align 4             ; [#uses=2 type=i32*]
  %__par11.addr = alloca i32, align 4             ; [#uses=2 type=i32*]
  %__par12.addr = alloca i32, align 4             ; [#uses=2 type=i32*]
  %__par13.addr = alloca i32, align 4             ; [#uses=2 type=i32*]
  %__par14.addr = alloca float, align 4           ; [#uses=2 type=float*]
  %__par15.addr = alloca float, align 4           ; [#uses=2 type=float*]
  %__par16.addr = alloca i8, align 1              ; [#uses=2 type=i8*]
  store float* %__par0, float** %__par0.addr, align 8
  store float* %__par1, float** %__par1.addr, align 8
  store float* %__par2, float** %__par2.addr, align 8
  store i32 %__par3, i32* %__par3.addr, align 4
  store i32 %__par4, i32* %__par4.addr, align 4
  store i32 %__par5, i32* %__par5.addr, align 4
  store i32 %__par6, i32* %__par6.addr, align 4
  store i32 %__par7, i32* %__par7.addr, align 4
  store i32 %__par8, i32* %__par8.addr, align 4
  store i32 %__par9, i32* %__par9.addr, align 4
  store i32 %__par10, i32* %__par10.addr, align 4
  store i32 %__par11, i32* %__par11.addr, align 4
  store i32 %__par12, i32* %__par12.addr, align 4
  store i32 %__par13, i32* %__par13.addr, align 4
  store float %__par14, float* %__par14.addr, align 4
  store float %__par15, float* %__par15.addr, align 4
  %frombool = zext i1 %__par16 to i8              ; [#uses=1 type=i8]
  store i8 %frombool, i8* %__par16.addr, align 1
  %0 = bitcast float** %__par0.addr to i8*        ; [#uses=1 type=i8*]
  %call = call i32 @cudaSetupArgument(i8* %0, i64 8, i64 0) ; [#uses=1 type=i32]
  %cmp = icmp ne i32 %call, 0                     ; [#uses=1 type=i1]
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = bitcast float** %__par1.addr to i8*        ; [#uses=1 type=i8*]
  %call1 = call i32 @cudaSetupArgument(i8* %1, i64 8, i64 8) ; [#uses=1 type=i32]
  %cmp2 = icmp ne i32 %call1, 0                   ; [#uses=1 type=i1]
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %return

if.end4:                                          ; preds = %if.end
  %2 = bitcast float** %__par2.addr to i8*        ; [#uses=1 type=i8*]
  %call5 = call i32 @cudaSetupArgument(i8* %2, i64 8, i64 16) ; [#uses=1 type=i32]
  %cmp6 = icmp ne i32 %call5, 0                   ; [#uses=1 type=i1]
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  br label %return

if.end8:                                          ; preds = %if.end4
  %3 = bitcast i32* %__par3.addr to i8*           ; [#uses=1 type=i8*]
  %call9 = call i32 @cudaSetupArgument(i8* %3, i64 4, i64 24) ; [#uses=1 type=i32]
  %cmp10 = icmp ne i32 %call9, 0                  ; [#uses=1 type=i1]
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end8
  br label %return

if.end12:                                         ; preds = %if.end8
  %4 = bitcast i32* %__par4.addr to i8*           ; [#uses=1 type=i8*]
  %call13 = call i32 @cudaSetupArgument(i8* %4, i64 4, i64 28) ; [#uses=1 type=i32]
  %cmp14 = icmp ne i32 %call13, 0                 ; [#uses=1 type=i1]
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end12
  br label %return

if.end16:                                         ; preds = %if.end12
  %5 = bitcast i32* %__par5.addr to i8*           ; [#uses=1 type=i8*]
  %call17 = call i32 @cudaSetupArgument(i8* %5, i64 4, i64 32) ; [#uses=1 type=i32]
  %cmp18 = icmp ne i32 %call17, 0                 ; [#uses=1 type=i1]
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end16
  br label %return

if.end20:                                         ; preds = %if.end16
  %6 = bitcast i32* %__par6.addr to i8*           ; [#uses=1 type=i8*]
  %call21 = call i32 @cudaSetupArgument(i8* %6, i64 4, i64 36) ; [#uses=1 type=i32]
  %cmp22 = icmp ne i32 %call21, 0                 ; [#uses=1 type=i1]
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end20
  br label %return

if.end24:                                         ; preds = %if.end20
  %7 = bitcast i32* %__par7.addr to i8*           ; [#uses=1 type=i8*]
  %call25 = call i32 @cudaSetupArgument(i8* %7, i64 4, i64 40) ; [#uses=1 type=i32]
  %cmp26 = icmp ne i32 %call25, 0                 ; [#uses=1 type=i1]
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end24
  br label %return

if.end28:                                         ; preds = %if.end24
  %8 = bitcast i32* %__par8.addr to i8*           ; [#uses=1 type=i8*]
  %call29 = call i32 @cudaSetupArgument(i8* %8, i64 4, i64 44) ; [#uses=1 type=i32]
  %cmp30 = icmp ne i32 %call29, 0                 ; [#uses=1 type=i1]
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end28
  br label %return

if.end32:                                         ; preds = %if.end28
  %9 = bitcast i32* %__par9.addr to i8*           ; [#uses=1 type=i8*]
  %call33 = call i32 @cudaSetupArgument(i8* %9, i64 4, i64 48) ; [#uses=1 type=i32]
  %cmp34 = icmp ne i32 %call33, 0                 ; [#uses=1 type=i1]
  br i1 %cmp34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end32
  br label %return

if.end36:                                         ; preds = %if.end32
  %10 = bitcast i32* %__par10.addr to i8*         ; [#uses=1 type=i8*]
  %call37 = call i32 @cudaSetupArgument(i8* %10, i64 4, i64 52) ; [#uses=1 type=i32]
  %cmp38 = icmp ne i32 %call37, 0                 ; [#uses=1 type=i1]
  br i1 %cmp38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.end36
  br label %return

if.end40:                                         ; preds = %if.end36
  %11 = bitcast i32* %__par11.addr to i8*         ; [#uses=1 type=i8*]
  %call41 = call i32 @cudaSetupArgument(i8* %11, i64 4, i64 56) ; [#uses=1 type=i32]
  %cmp42 = icmp ne i32 %call41, 0                 ; [#uses=1 type=i1]
  br i1 %cmp42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end40
  br label %return

if.end44:                                         ; preds = %if.end40
  %12 = bitcast i32* %__par12.addr to i8*         ; [#uses=1 type=i8*]
  %call45 = call i32 @cudaSetupArgument(i8* %12, i64 4, i64 60) ; [#uses=1 type=i32]
  %cmp46 = icmp ne i32 %call45, 0                 ; [#uses=1 type=i1]
  br i1 %cmp46, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.end44
  br label %return

if.end48:                                         ; preds = %if.end44
  %13 = bitcast i32* %__par13.addr to i8*         ; [#uses=1 type=i8*]
  %call49 = call i32 @cudaSetupArgument(i8* %13, i64 4, i64 64) ; [#uses=1 type=i32]
  %cmp50 = icmp ne i32 %call49, 0                 ; [#uses=1 type=i1]
  br i1 %cmp50, label %if.then51, label %if.end52

if.then51:                                        ; preds = %if.end48
  br label %return

if.end52:                                         ; preds = %if.end48
  %14 = bitcast float* %__par14.addr to i8*       ; [#uses=1 type=i8*]
  %call53 = call i32 @cudaSetupArgument(i8* %14, i64 4, i64 68) ; [#uses=1 type=i32]
  %cmp54 = icmp ne i32 %call53, 0                 ; [#uses=1 type=i1]
  br i1 %cmp54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.end52
  br label %return

if.end56:                                         ; preds = %if.end52
  %15 = bitcast float* %__par15.addr to i8*       ; [#uses=1 type=i8*]
  %call57 = call i32 @cudaSetupArgument(i8* %15, i64 4, i64 72) ; [#uses=1 type=i32]
  %cmp58 = icmp ne i32 %call57, 0                 ; [#uses=1 type=i1]
  br i1 %cmp58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.end56
  br label %return

if.end60:                                         ; preds = %if.end56
  %call61 = call i32 @cudaSetupArgument(i8* %__par16.addr, i64 1, i64 76) ; [#uses=1 type=i32]
  %cmp62 = icmp ne i32 %call61, 0                 ; [#uses=1 type=i1]
  br i1 %cmp62, label %if.then63, label %if.end64

if.then63:                                        ; preds = %if.end60
  br label %return

if.end64:                                         ; preds = %if.end60
  store i8* bitcast (void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)* @_Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffb to i8*), i8** @_ZZL61__device_stub__Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffbPfS_S_iiiiiiiiiiiffbE3__f, align 8
  %call65 = call i32 @_ZN63_GLOBAL__N__43_tmpxft_000019dc_00000000_6_convOpti_cpp1_ii_main10cudaLaunchIcEE9cudaErrorPT_(i8* bitcast (void (float*, float*, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i1)* @_Z14optiConvFilterILi1EEvPfS0_S0_iiiiiiiiiiiffb to i8*)) ; [#uses=0 type=i32]
  br label %return

return:                                           ; preds = %if.end64, %if.then63, %if.then59, %if.then55, %if.then51, %if.then47, %if.then43, %if.then39, %if.then35, %if.then31, %if.then27, %if.then23, %if.then19, %if.then15, %if.then11, %if.then7, %if.then3, %if.then
  ret void
}

; [#uses=17]
declare i32 @cudaSetupArgument(i8*, i64, i64) #2

; [#uses=1]
; Function Attrs: inlinehint uwtable
define linkonce_odr i32 @_ZN63_GLOBAL__N__43_tmpxft_000019dc_00000000_6_convOpti_cpp1_ii_main10cudaLaunchIcEE9cudaErrorPT_(i8* %func) #5 {
entry:
  %func.addr = alloca i8*, align 8                ; [#uses=2 type=i8**]
  store i8* %func, i8** %func.addr, align 8
  %0 = load i8** %func.addr, align 8              ; [#uses=1 type=i8*]
  %call = call i32 @cudaLaunch(i8* %0)            ; [#uses=1 type=i32]
  ret i32 %call
}

; [#uses=1]
declare i32 @cudaLaunch(i8*) #2

; [#uses=1]
declare i32 @cudaFuncSetCacheConfig(i8*, i32) #2

; [#uses=1]
; Function Attrs: nounwind readnone
declare double @sqrt(double) #7

; [#uses=1]
; Function Attrs: nounwind uwtable
define internal void @_ZL22____nv_dummy_param_refPv(i8* %param) #8 {
entry:
  %param.addr = alloca i8*, align 8               ; [#uses=2 type=i8**]
  store i8* %param, i8** %param.addr, align 8
  %0 = load i8** %param.addr, align 8             ; [#uses=1 type=i8*]
  %1 = bitcast i8* %0 to i8**                     ; [#uses=1 type=i8**]
  store i8** %1, i8*** @_ZZL22____nv_dummy_param_refPvE5__ref, align 8
  ret void
}

; [#uses=1]
declare void @__cudaUnregisterFatBinary(i8**) #2

; [#uses=1]
; Function Attrs: nounwind uwtable
define internal void @_ZL37__nv_save_fatbinhandle_for_managed_rtPPv(i8** %in) #8 {
entry:
  %in.addr = alloca i8**, align 8                 ; [#uses=2 type=i8***]
  store i8** %in, i8*** %in.addr, align 8
  %0 = load i8*** %in.addr, align 8               ; [#uses=1 type=i8**]
  store i8** %0, i8*** @_ZL32__nv_fatbinhandle_for_managed_rt, align 8
  ret void
}

; [#uses=1]
declare void @__cudaRegisterFunction(i8**, i8*, i8*, i8*, i32, %struct.uint3*, %struct.uint3*, %struct.dim3*, %struct.dim3*, i32*) #2

; [#uses=1]
; Function Attrs: nounwind uwtable
define linkonce_odr void @_ZN4dim3C2Ejjj(%struct.dim3* %this, i32 %vx, i32 %vy, i32 %vz) unnamed_addr #8 align 2 {
entry:
  %this.addr = alloca %struct.dim3*, align 8      ; [#uses=2 type=%struct.dim3**]
  %vx.addr = alloca i32, align 4                  ; [#uses=2 type=i32*]
  %vy.addr = alloca i32, align 4                  ; [#uses=2 type=i32*]
  %vz.addr = alloca i32, align 4                  ; [#uses=2 type=i32*]
  store %struct.dim3* %this, %struct.dim3** %this.addr, align 8
  store i32 %vx, i32* %vx.addr, align 4
  store i32 %vy, i32* %vy.addr, align 4
  store i32 %vz, i32* %vz.addr, align 4
  %this1 = load %struct.dim3** %this.addr         ; [#uses=3 type=%struct.dim3*]
  %x = getelementptr inbounds %struct.dim3* %this1, i32 0, i32 0 ; [#uses=1 type=i32*]
  %0 = load i32* %vx.addr, align 4                ; [#uses=1 type=i32]
  store i32 %0, i32* %x, align 4
  %y = getelementptr inbounds %struct.dim3* %this1, i32 0, i32 1 ; [#uses=1 type=i32*]
  %1 = load i32* %vy.addr, align 4                ; [#uses=1 type=i32]
  store i32 %1, i32* %y, align 4
  %z = getelementptr inbounds %struct.dim3* %this1, i32 0, i32 2 ; [#uses=1 type=i32*]
  %2 = load i32* %vz.addr, align 4                ; [#uses=1 type=i32]
  store i32 %2, i32* %z, align 4
  ret void
}

attributes #0 = { uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.4 (trunk 193160)"}
